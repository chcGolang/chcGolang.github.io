<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMQ的知识和使用</title>
      <link href="/posts/c6f2a7a/"/>
      <url>/posts/c6f2a7a/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Rabbitmq简介"><a href="#一-Rabbitmq简介" class="headerlink" title="一 Rabbitmq简介"></a>一 Rabbitmq简介</h1><p>*rabbitmq是一个开源的消息代理和队列服务器,用来通过普通协议在完全不同的应用之间共享数据,rabbitmq是使用二郎语言来编写的,并且rabbitmq是基于AMQP协议的.</p><h2 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h2><ul><li>与springAMQP完美的整合,API丰富</li><li>集群模式丰富,表达式配置,ha模式,镜像队列模式</li><li>保证数据不丢失的前提做到高可靠性,可用性</li></ul><h1 id="二-AMQP协议"><a href="#二-AMQP协议" class="headerlink" title="二 AMQP协议"></a>二 AMQP协议</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>是具有现代特征的二进制协议.是一个提供统一消息服务的应用层标准高级消息队列协议,是应用层协议的一个开放标准,为面向消息的中间件设计.</p><h2 id="2-核心概念"><a href="#2-核心概念" class="headerlink" title="2. 核心概念"></a>2. 核心概念</h2><ul><li>Server:又称Broker,接受客户端的连接,实现AMQP实体服务</li><li>connection:连接,应用程序与broker的网络连接</li><li>Channel:网络信道,几乎所有的操作都在Channel中进行,Channel是进行消息读写的通道.客户端可建立多个Channel,每个Channel代表个会任务.</li><li>message:消息,服务器和应用程序之间传送的数据,由properties和body组成.properties可以对消息进行修饰,比如消息的优先级,延迟等高级特性;body则就是消息体内容.</li><li>virtual host: 虚拟地址,用于进行逻辑隔离,最上层的消息路由.一个virtual host里面可以有若干个exchange和queue, 同一个virtual host里面不能有相同名称的exchange或queue</li><li>exchange:交换机,接收消息,根据路由键转发消息到绑定的队列</li><li>binding:exchange和queue之间的虚拟连接,binding中可以包含routing key</li><li>Routing key: 一个路由规则,虚拟机可用它来确定如何路由一个特定消息</li><li>queue:消息队列,保存消息并将它们转发给消费者</li></ul><h2 id="3-exchange属性"><a href="#3-exchange属性" class="headerlink" title="3. exchange属性"></a>3. exchange属性</h2><ul><li>Name: 交换机名称</li><li>Type:交换机类型direct,topic,fanout,headers</li><li>Durability:是否需要持久化,true为持久化</li><li>Auto Delete:当最后一个绑定到exchange上的队列删除后,自动删除该exchange</li><li>Internal:当前exchange是否用于rabbitmq内部使用,默认false</li><li>Arguments:扩展参数,用于扩展AMQP协议自制定化使用<h3 id="1-Direct-Exchange"><a href="#1-Direct-Exchange" class="headerlink" title="1. Direct Exchange"></a>1. Direct Exchange</h3></li><li>所有发送到Direct Exchange的消息被转发到Routekey中指定queue</li><li>Direct模式可以使用rabbitmq自带的exchange:default exchange, 所有不需要将exchange进行任何绑定操作,消息传递时,routekey必须完全匹配才会被队列接收,否则该消息会被抛弃.</li></ul><h3 id="2-Topic-Exchange"><a href="#2-Topic-Exchange" class="headerlink" title="2.Topic Exchange"></a>2.Topic Exchange</h3><ul><li>所有发送到Topic Exchange的消息被转发到所有关心routekey中指定topic的queue上</li><li>exchange将routekey和某topic进行模糊匹配,此时队列需要绑定一个topic</li><li>可以使用通配符进行模糊匹配</li><li>“#”匹配一个或多个词</li><li>“*”匹配一个词</li><li>例如:”log.#”能够匹配到”log.INF.oa”</li><li>例如:”log.*”能够匹配到”log.conf”</li></ul><h3 id="3-fanout-exchange"><a href="#3-fanout-exchange" class="headerlink" title="3. fanout exchange"></a>3. fanout exchange</h3><ul><li>不处理路由键,只需要简单的将队列绑定到交换机上</li><li>发送到交换机的消息都会被转发到与该交换机绑定的所有队列上</li><li>fanout交换机转发消息是最快的</li></ul><h2 id="4-Queue"><a href="#4-Queue" class="headerlink" title="4. Queue"></a>4. Queue</h2><ul><li>消息队列,实际存储消息数据</li><li>Durability:是否持久化,Durable:是,Transient:否</li><li>Auto delete:如选yes, 代表当最后一个监听被移除之后,该queue会自动被删除</li></ul><h2 id="5-VirtualHost"><a href="#5-VirtualHost" class="headerlink" title="5. VirtualHost"></a>5. VirtualHost</h2><ul><li>虚拟地址,用于进行逻辑隔离,最上层的消息路由</li><li>一个 virtual host 里面可以有若干个exchange和queue</li><li>同一个virtual host里面不能有相同名称的exchange或queue</li></ul><h1 id="三-消息生产与消费"><a href="#三-消息生产与消费" class="headerlink" title="三 消息生产与消费"></a>三 消息生产与消费</h1><ul><li>ConnrctionFactory:获取连接工厂</li><li>Connection:一个连接</li><li>Channel:数据通信信道,可发送和接收消息</li><li>Queue:具体的消息存储队列</li><li>Producer&amp;Consumer 生产和消费者</li></ul><h1 id="四-可靠性投递"><a href="#四-可靠性投递" class="headerlink" title="四 可靠性投递"></a>四 可靠性投递</h1><ul><li><ol><li>消息信息落库,对消息状态进行记录</li></ol></li><li><ol start="2"><li>消息的延迟投递,做二次确认,回调检查<br><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/rabbitmq/%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%BA%8C.PNG" alt="方案二"></li></ol></li></ul><h1 id="五-消息确认机制"><a href="#五-消息确认机制" class="headerlink" title="五 消息确认机制"></a>五 消息确认机制</h1><h2 id="1-Confirm"><a href="#1-Confirm" class="headerlink" title="1. Confirm"></a>1. Confirm</h2><ul><li>消息确认,是指生产者投递消息后,如果Broker收到消息,则会给我们生产者一个应答.</li><li>生产者进行接收应答,用来确认这条消息是否正常的发送到Broker,这种方式也是消息的可靠性投递的核心保障</li><li>只能说明投递成功,不能说明消费者接收成功</li></ul><h2 id="2-Return消息机制"><a href="#2-Return消息机制" class="headerlink" title="2. Return消息机制"></a>2. Return消息机制</h2><ul><li>Return Listener用于处理一些不可路由的消息</li><li>如果我们在发送消息的时候,当前的exchange不存在或者指定的路由key路由不到,就需要用到Return Listener</li><li>关键配置项:Mandatory:如果为true,监听器接收到路由不可达的消息,然后进行后续处理,如果为false,那么broker端自动删除该消息</li></ul><h1 id="六-消费端限流"><a href="#六-消费端限流" class="headerlink" title="六 消费端限流"></a>六 消费端限流</h1><ul><li>Rabbitmq提供了一种qos(服务质量保证)功能,即在非自动确认消息的前提下,如果一定数目的消息(通过基于consume或者channel设置qos的值)未被确认前,不进行消费新的消息.</li><li>java 方法:<code>void BasicQos(unit pregetchSize,ushort prefetchCount,bool global);</code><ol><li>prefetchSize:0 (单条消息消费的大小限制,一般设为:0不限制)</li><li>prefetchCount:N (一般设置:1,会告诉rabbitmq不要同时给一个消费者推送多余N个消息,即一旦有N给消息还没有ack,则该consumer将block掉,直到有消息ack)</li><li>global:true/false (是否将上面设置应用于channel,简单点说,就是上面限制是channel级别的还是consumer级别)</li><li>注意:prefetchSize和global这两项,rabbitmq没有实现,prefetchCount在no_ask=false的情况下生效,机在自动应答的情况下这两个值是不生效的.</li></ol></li></ul><h1 id="七-消费端ack与重回队列"><a href="#七-消费端ack与重回队列" class="headerlink" title="七 消费端ack与重回队列"></a>七 消费端ack与重回队列</h1><ul><li>消费端进行消费的时候,如果由于业务异常我们可以进行日志的记录,然后进行补偿</li><li>如果由于服务器宕机等严重问题,那我们就需要手工进行ack保障消费端消费端消费成功</li><li>消费端重回队列是为了对没有处理成功的消息,把消息重新递给broker</li><li>一般我们在实际应用中,都会关闭重回队列,也就是设置为false</li></ul><h1 id="八-TTL队列-消息"><a href="#八-TTL队列-消息" class="headerlink" title="八 TTL队列/消息"></a>八 TTL队列/消息</h1><ul><li>在消息发送时可以进行指定消息的过期时间</li><li>队列的过期时间,从消息进入队列开始计算,只要超过了队列的超时时间配置,那么消息会自动的清除</li></ul><h1 id="九-死信队列-DLX-Dead-Letter-Exchange"><a href="#九-死信队列-DLX-Dead-Letter-Exchange" class="headerlink" title="九 死信队列(DLX,Dead-Letter-Exchange)"></a>九 死信队列(DLX,Dead-Letter-Exchange)</h1><ol><li><p>特点</p><ul><li>利用DLX,当消息在一个队列中变成死信(dead message)之后,它能被重新publish到另一个exchange,这个exchange就是DLX</li><li>DLX也是一个正常的exchange,和一般的exchange没有区别,他能在任何的队列上被指定,实际上就是设置某个队列的属性.</li><li>当这个队列中有死信时,rabbitmq就会自动的将这个消息重新发布到设置的exchange上去,进而被路由到另一个队列.</li><li>可以监听这个队列中消息做相应的处理</li></ul></li><li><p>消息变成死信的情况</p><ul><li>消息被拒绝(basic.reject/basic.nack)并且requeue=false</li><li>消息TTL过期</li><li>队列达到最大长度</li></ul></li><li><p>死信队列设置:</p><ul><li>进行正常声明交换机,队列,绑定,只不过我们需要在队列加上一个参数即可:arguments.put(“x-dead-letter-exchange”,”dlx.exchange”);</li></ul></li></ol><h1 id="十-Spring-Cloud-Stream-整合"><a href="#十-Spring-Cloud-Stream-整合" class="headerlink" title="十 Spring Cloud Stream 整合"></a>十 Spring Cloud Stream 整合</h1><ul><li>barista接口:定义通道类型和通道名称,通道名称是作为配置用,通道类型则决定了app会使用者一通道进行发送消息还是从中接收消息</li><li>@Ouput:输出注解,用于定义发送消息接口</li><li>@Input:输入注解,用于定义消息的消费者接口</li><li>缺点:不能实现可靠性的投递,会存在少量消息丢失的问题</li></ul><h1 id="消息使用"><a href="#消息使用" class="headerlink" title="消息使用"></a>消息使用</h1><h2 id="1-事务机制"><a href="#1-事务机制" class="headerlink" title="1. 事务机制"></a>1. 事务机制</h2><ol><li><p>基本使用</p><ul><li>RabbitMQ中与事务机制有关的方法有三个：txSelect(), txCommit()以及txRollback()</li><li>txSelect用于将当前channel设置成transaction模式</li><li>txCommit用于提交事务</li><li>txRollback用于回滚事务</li><li>在通过txSelect开启事务之后，我们便可以发布消息给broker代理服务器了，如果txCommit提交成功了，则消息一定到达了broker了，如果在txCommit执行之前broker异常崩溃或者由于其他原因抛出异常，这个时候我们便可以捕获异常通过txRollback回滚事务了</li><li>使用说明地址:<code>https://www.jianshu.com/p/801456df3930</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.txSelect(); </span><br><span class="line">channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, msg.getBytes()); </span><br><span class="line">channel.txCommit();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>缺点和解决方案</p></li></ol><ul><li>在并发量大的情况在rabbitmq事务会非常的占用资源</li><li>解决方法:<ol><li>采用类似可靠性投递的机制,进行补偿投递</li><li>操作的数据源要统一,也就是业务操作db1和消息投递的db2使用同一个数据源</li></ol></li></ul><h1 id="制定扩展"><a href="#制定扩展" class="headerlink" title="制定扩展"></a>制定扩展</h1><ul><li>插件搜索下载地址:<code>http://www.rabbitmq.com/community-plugins.html</code></li></ul><ol><li>延迟队列插件</li></ol><ul><li><p>延迟插件名称:rabbitmq_delayed_message_exchange</p></li><li><p>将<code>***.ez</code>放入<code>{rabbitmq_server}/plugins</code>目录下</p></li><li><p>重命名插件名称<code>rabbitmq_delayed_message_exchange-0.0.1.ez</code></p></li><li><p>启动插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><ul><li>ps: 关闭指定插件的命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins disable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h1><p><a href="https://github.com/chcGolang/RabbitMQ_Test" target="_blank" rel="noopener">https://github.com/chcGolang/RabbitMQ_Test</a></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务总结</title>
      <link href="/posts/a9e99186/"/>
      <url>/posts/a9e99186/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub地址"><a href="#GitHub地址" class="headerlink" title="GitHub地址"></a>GitHub地址</h1><p><a href="https://github.com/chcGolang/DistributedTransaction" target="_blank" rel="noopener">分布式事务知识</a><br><a href="https://github.com/chcGolang/SpringCloud_Test" target="_blank" rel="noopener">SpringCloud整合</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol><li>什么是事务</li></ol><ul><li>事务是以一种可靠,一致的方式,访问和操作数据库中数据的程序单元</li></ul><ol start="2"><li><p>原则</p><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul></li><li><p>sql版的事务</p><ul><li>案例教程:<code>http://www.runoob.com/mysql/mysql-transaction.html</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;  <span class="comment"># 开始事务</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> runoob_transaction_test <span class="keyword">value</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> runoob_transaction_test <span class="keyword">value</span>(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">commit</span>; <span class="comment"># 提交事务</span></span><br><span class="line"><span class="keyword">rollback</span>;  <span class="comment"># 回滚</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>mysql的查询锁</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 加入FOR UPDATE就会获取锁,但是会锁住全表</span><br><span class="line">SELECT * FROM T_USER FOR UPDATE</span><br><span class="line"></span><br><span class="line"># 加入where条件,则只会锁住符合条件的那条数据</span><br><span class="line">SELECT * FROM T_USER WHERE id=1 FOR UPDATE</span><br></pre></td></tr></table></figure></li></ol><h1 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h1><h2 id="spring事务机制"><a href="#spring事务机制" class="headerlink" title="spring事务机制"></a>spring事务机制</h2><ul><li>提供统一的API接口支持不同的资源</li><li>提供声明式事务管理</li><li>方便的与Spring框架集成</li><li>多个资源的事务管理,同步</li></ul><h2 id="spring事务抽象"><a href="#spring事务抽象" class="headerlink" title="spring事务抽象"></a>spring事务抽象</h2><ul><li><p>PlatformTransactionManager:提供事务管理器的接口</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事务管理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlatformTransactionManager</span></span>&#123;</span><br><span class="line">    <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span><span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span><span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TransactionDefinition: 事务的定义</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事务定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionDefinition</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取事务传播机制</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPropagationBehavior</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 隔离级别</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getlsolationLevel</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 事务名字</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 超时时间</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 是否为只读</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>事务的隔离级别</li></ol><table><thead><tr><th>隔离级别</th><th>含义</th></tr></thead><tbody><tr><td>TransactionDefinition.ISOLATION_DEFAULT (默认)</td><td>使用后端数据库默认的隔离级别。</td></tr><tr><td>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</td><td>允许读取尚未提交的更改。可能导致脏读、幻影读或不可重复读。</td></tr><tr><td>TransactionDefinition.ISOLATION_READ_COMMITTED</td><td>允许从已经提交的并发事务读取。可防止脏读，但幻影读和不可重复读仍可能会发生。</td></tr><tr><td>TransactionDefinition.ISOLATION_REPEATABLE_READ</td><td>对相同字段的多次读取的结果是一致的，除非数据被当前事务本身改变。可防止脏读和不可重复读，但幻影读仍可能发生。</td></tr><tr><td>TransactionDefinition.ISOLATION_SERIALIZABLE</td><td>完全服从ACID的隔离级别，确保不发生脏读、不可重复读和幻影读。这在所有隔离级别中也是最慢的，因为它通常是通过完全锁定当前事务所涉及的数据表来完成的。</td></tr></tbody></table><ol start="2"><li>传播机制</li></ol><table><thead><tr><th>传播行为</th><th>意义</th></tr></thead><tbody><tr><td>TransactionDefinition.PROPAGATION_MANDATORY</td><td>表示该方法必须运行在一个事务中。如果当前没有事务正在发生，将抛出一个异常</td></tr><tr><td>TransactionDefinition.PROPAGATION_NESTED</td><td>表示如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于封装事务进行提交或回滚。如果封装事务不存在，行为就像PROPAGATION_REQUIRES一样。</td></tr><tr><td>TransactionDefinition.PROPAGATION_NEVER</td><td>表示当前的方法不应该在一个事务中运行。如果一个事务正在进行，则会抛出一个异常。</td></tr><tr><td>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</td><td>表示该方法不应该在一个事务中运行。如果一个现有事务正在进行中，它将在该方法的运行期间被挂起。</td></tr><tr><td>TransactionDefinition.PROPAGATION_SUPPORTS</td><td>表示当前方法不需要事务性上下文，但是如果有一个事务已经在运行的话，它也可以在这个事务里运行。</td></tr><tr><td>TransactionDefinition.PROPAGATION_REQUIRES_NEW</td><td>表示当前方法必须在它自己的事务里运行。一个新的事务将被启动，而且如果有一个现有事务在运行的话，则将在这个方法运行期间被挂起。</td></tr><tr><td>TransactionDefinition.PROPAGATION_REQUIRED (默认)</td><td>表示当前方法必须在一个事务中运行。如果一个现有事务正在进行中，该方法将在那个事务中运行，否则就要开始一个新事务。</td></tr></tbody></table><ul><li>TransactionStatus: 正在运行的事务状态  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionStatus</span> <span class="keyword">extends</span> <span class="title">SavepointManager</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> isNew <span class="title">Transaction</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasSavepoint</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRolbackOnly</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCompleted</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="PlatformTransactionManager的常见实现"><a href="#PlatformTransactionManager的常见实现" class="headerlink" title="PlatformTransactionManager的常见实现"></a>PlatformTransactionManager的常见实现</h3><ul><li>DataSourceTransactionManager</li><li>JpaTransactionManager</li><li>JmsTransactionManager</li><li>JtaTransactionManager</li></ul><h2 id="Spring外部事务和JTA"><a href="#Spring外部事务和JTA" class="headerlink" title="Spring外部事务和JTA"></a>Spring外部事务和JTA</h2><h3 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h3><ul><li>Spring容器管理事务的生命周期</li><li>通过Spring事务接口调用</li><li>业务代码与具体事务的实现无关<br><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/rabbitmq/spring%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1.PNG" alt="image"></li></ul><h3 id="外部-全局-事务"><a href="#外部-全局-事务" class="headerlink" title="外部(全局)事务"></a>外部(全局)事务</h3><ul><li>外部事务管理器提供事务管理</li><li>通过spring事务接口,调用外部管理器</li><li>使用JNDI等方式获取外部事务管理器的实例</li><li>外部事务管理器一般由应用服务器提供,如Jboss等</li></ul><h4 id="JTA"><a href="#JTA" class="headerlink" title="JTA"></a>JTA</h4><ul><li>外部事务管理器提供JTA事务管理</li><li>JTA事务管理器可以管理多个数据资源</li><li>通过2阶段提交实现多数据源的事务</li><li>JTA用途:一个java服务访问多个数据源的时候<br><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/rabbitmq/%E5%A4%96%E9%83%A8%E4%BA%8B%E5%8A%A1.PNG" alt="image"></li></ul><h4 id="XA与JTA"><a href="#XA与JTA" class="headerlink" title="XA与JTA"></a>XA与JTA</h4><ul><li>XA协议由Tuxedo首先提出的，并交给X/Open组织，作为资源管理器（数据库）与事务管理器的接口标准</li><li>Transaction Manager</li><li>XA Resource</li><li>两阶段提交</li><li>Spring Boot通过Atomkos或Bitronix的内嵌事务管理器支持跨多个XA资源的分布式JTA事务，当部署到恰当的J2EE应用服务器时也会支持JTA事务。</li><li>当发现JTA环境时，SpringBoot将使用Spring的JtaTransactionManager来管理事务。自动配置的JMS，DataSource和JPA　beans将被升级以支持XA事务。你可以使用标准的Spring idioms，比如@Transactional，来参与到一个分布式事务中。如果处于JTA环境，但仍想使用本地事务，你可以将spring.jta.enabled属性设置为false来禁用JTA自动配置功能。</li></ul><p><a href="https://www.breakyizhan.com/springboot/3413.html" target="_blank" rel="noopener">https://www.breakyizhan.com/springboot/3413.html</a></p><h4 id="JTA事务管理的弊端"><a href="#JTA事务管理的弊端" class="headerlink" title="JTA事务管理的弊端"></a>JTA事务管理的弊端</h4><ul><li>两阶段提交(第一阶段：准备阶段(投票阶段)和第二阶段：提交阶段（执行阶段）)</li><li>事务时间太长,锁数据的时间太长</li><li>低性能,低吞吐量</li></ul><h4 id="不使用JTA实现多数据源的事务管理"><a href="#不使用JTA实现多数据源的事务管理" class="headerlink" title="不使用JTA实现多数据源的事务管理"></a>不使用JTA实现多数据源的事务管理</h4><ul><li>Spring事务同步机制</li><li>多数据源上实现近似事务一致性</li><li>高性能,高吞吐量</li></ul><h2 id="spring事务异常"><a href="#spring事务异常" class="headerlink" title="spring事务异常"></a>spring事务异常</h2><ol><li>Spring Boot 2.0 使用data JPA @Transactional 报错事务不回滚</li></ol><ul><li>解决方法:<code>https://blog.csdn.net/kylinregister/article/details/80678223</code></li></ul><h1 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h1><ul><li>定义:将不同的组件分布在不同的服务器上,给用户提供一个可靠,统一的服务</li></ul><h2 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h2><ul><li>C 一致性</li><li>A 可用性</li><li>P 分区容错性</li></ul><h2 id="分布式系统设计需要考虑的问题"><a href="#分布式系统设计需要考虑的问题" class="headerlink" title="分布式系统设计需要考虑的问题"></a>分布式系统设计需要考虑的问题</h2><ul><li>服务拆分</li><li>数据拆分</li><li>计算拆分</li><li>服务状态以及异常处理</li></ul><h3 id="微服务架构的组成"><a href="#微服务架构的组成" class="headerlink" title="微服务架构的组成"></a>微服务架构的组成</h3><ul><li>服务发现与注册</li><li>服务网关与负载均衡</li><li>监控与熔断机制</li><li>配置,消息等</li></ul><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h2 id="事务的原则"><a href="#事务的原则" class="headerlink" title="事务的原则"></a>事务的原则</h2><ul><li>A 原子性</li><li>C 一致性</li><li>I 隔离性</li><li>D 持久性</li></ul><h2 id="spring分布式事务"><a href="#spring分布式事务" class="headerlink" title="spring分布式事务"></a>spring分布式事务</h2><p><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/spring%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.PNG" alt="image"></p><h3 id="spring-JTA"><a href="#spring-JTA" class="headerlink" title="spring JTA"></a>spring JTA</h3><ul><li>可以使用如JBoss之类的应用服务器提供的JTA事务管理器</li><li>可以使用Atomikos,Bitronix等库提供的JTA事务管理器</li></ul><h3 id="不使用JTA的事务方案"><a href="#不使用JTA的事务方案" class="headerlink" title="不使用JTA的事务方案"></a>不使用JTA的事务方案</h3><ol><li><p>使用MQ最大努力一次提交+重试</p><ul><li>提交MQ事务出错,消息会被放回MQ,重新触发该方法</li><li>会重复数据库操作,需要忽略重复消息</li></ul></li><li><p>链式事务管理</p><ul><li>定义一个事务链</li><li>多个事务在一个事务管理器里依次提交</li><li>可能出错</li></ul></li></ol><h3 id="如何选择方案"><a href="#如何选择方案" class="headerlink" title="如何选择方案"></a>如何选择方案</h3><ol><li><p>根据一致性要求</p><ul><li>强一致性事务:JTA(性能最差,只适用于单个服务内)</li><li>弱,最终一致性事务:最大努力一次提交,链式事务(设计相应的错误处理机制)</li></ul></li><li><p>根据场景</p><ul><li>MQ-DB:最大努力一次提交+重试</li><li>多个DB:链式事务</li><li>多个数据源:链式事务,或其他事务同步方式</li></ul></li></ol><h2 id="分布式事务实现模式与技术"><a href="#分布式事务实现模式与技术" class="headerlink" title="分布式事务实现模式与技术"></a>分布式事务实现模式与技术</h2><h3 id="分布式系统唯一性ID-GUID"><a href="#分布式系统唯一性ID-GUID" class="headerlink" title="分布式系统唯一性ID:GUID"></a>分布式系统唯一性ID:GUID</h3><ul><li>分布式系统的全局唯一标识</li><li>UUID:生成唯一id的规范</li><li>用于唯一标识,处理重复消息</li><li>Redis的INCR操作,Zookeeper节点的版本号</li></ul><h3 id="分布式系统分布式对象"><a href="#分布式系统分布式对象" class="headerlink" title="分布式系统分布式对象"></a>分布式系统分布式对象</h3><ul><li>Redis:Redisson库:RLock,RMap,RQueue等对象</li><li>Zookeeper:Netflix Curator库:Lock,Queue等对象</li></ul><h3 id="实现模式"><a href="#实现模式" class="headerlink" title="实现模式"></a>实现模式</h3><ul><li>消息驱动模式:Message Driven (使用MQ消息将服务串起来)</li><li>事件溯源模式:Event Sourcing</li><li>TCC模式:Tty-Confirm-Cancel</li></ul><h3 id="消息驱动模式"><a href="#消息驱动模式" class="headerlink" title="消息驱动模式"></a>消息驱动模式</h3><h4 id="微服务架构的事务问题"><a href="#微服务架构的事务问题" class="headerlink" title="微服务架构的事务问题"></a>微服务架构的事务问题</h4><ol><li>服务间调用操作的回滚</li><li>服务间调用失败的重试问题</li></ol><ul><li>解决方法:<ul><li>方法1:减少服务间的调用</li><li>方法2:没有服务间调用,通过消息驱动调用服务</li></ul></li></ul><ol start="3"><li>案例地址:<a href="https://github.com/chcGolang/SpringCloud_Test" target="_blank" rel="noopener">https://github.com/chcGolang/SpringCloud_Test</a></li></ol><h4 id="注意的问题"><a href="#注意的问题" class="headerlink" title="注意的问题"></a>注意的问题</h4><ul><li>消息中间件需要支持事务</li><li>如何处理重试的消息</li><li>发送业务异常时回滚操作</li></ul><h4 id="系统错误的处理"><a href="#系统错误的处理" class="headerlink" title="系统错误的处理"></a>系统错误的处理</h4><ul><li>方法1: 将出错未处理的消息写到失败队列,进行相应回滚操作</li><li>方法2: 通过定时任务检查超时订单,对未完成的订单做自动回滚</li><li>方法3: 保存出错消息,人工处理</li></ul><h3 id="事件溯源"><a href="#事件溯源" class="headerlink" title="事件溯源"></a>事件溯源</h3><ul><li>优点<ol><li>历史重新:从事件中重新生成视图数据库</li><li>方便的数据流处理与报告生成</li><li>性能</li><li>服务的松耦合</li></ol></li><li>缺点<ol><li>只能保证事务的最终一致性</li><li>设计和开发思维的转变,学习成本</li><li>事件结构的改变</li><li>扩展性:Event Store的分布式实现,事件的分布式处理</li></ol></li></ul><h4 id="Axon框架"><a href="#Axon框架" class="headerlink" title="Axon框架"></a>Axon框架</h4><ul><li>学习入门地址:<a href="https://docs.axoniq.io/reference-guide/" target="_blank" rel="noopener">https://docs.axoniq.io/reference-guide/</a></li><li>实现Event Sourcing和CQRS模式的框架</li><li>实现命令,事件的分发,处理,聚合,查询,存储</li><li>提供标签式开发,易维护,并提供SpringBoot的集成</li><li>提供Command和Event</li></ul><h5 id="Axon框架的构成"><a href="#Axon框架的构成" class="headerlink" title="Axon框架的构成"></a>Axon框架的构成</h5><ul><li>聚合:Aggregate</li><li>聚合的资源库:Repository</li><li>Command:Command Bus和command handler</li><li>Event:Event Bus,Event Handler和Event Store</li><li>Saga:基于事件的流程管理模式</li><li>Query:执行数据查询操作的特殊Command\</li><li>可扩展性<ol><li>分布式Command分发</li><li>通过AMQP实现分布式Event分发和处理</li></ol></li></ul><h5 id="Axon框架处理Command过程"><a href="#Axon框架处理Command过程" class="headerlink" title="Axon框架处理Command过程"></a>Axon框架处理Command过程</h5><ul><li>Resource收到请求,send给CommandGateway</li><li>CommandGateway执行拦截器等,在发给CommandBus</li><li>CommandBus创建一个Unitofwork,关联一个事务,在其中调用CommandHandler处理这个Command</li><li>CommandHandler使用Repository获得一个聚合对象,并聚合所有该对象的event.设置lock,然后调用处理方法</li><li>CommandHandler在触发一个Event</li></ul><h5 id="Axon框架处理Event过程"><a href="#Axon框架处理Event过程" class="headerlink" title="Axon框架处理Event过程"></a>Axon框架处理Event过程</h5><ul><li>CommandHandler执行apply来触发一个event</li><li>EventBus在这个event上执行拦截器等</li><li>EventBus将在这个event保存到EventStore</li><li>EventBus调用在这个event上注册的所有处理方法(在UnitOfWork中执行)</li><li>在EventHandler中更新聚合数据,保存视图数据库,触发其他Command</li></ul><h5 id="Axon框架Command和event的区别"><a href="#Axon框架Command和event的区别" class="headerlink" title="Axon框架Command和event的区别"></a>Axon框架Command和event的区别</h5><ul><li>Command<ol><li>表示某种业务动作</li><li>只被处理一次</li><li>可以有返回值</li><li>只做条件检查,触发相应Event去更新数据</li></ol></li><li>Event<ol><li>表示系统内发生的事件,某种业务状态的更新</li><li>可以被多次处理</li><li>没有返回值</li><li>更新聚合数据并保持在Event Store中,用重新生成聚合数据</li></ol></li></ul><h5 id="Axon-Saga"><a href="#Axon-Saga" class="headerlink" title="Axon Saga"></a>Axon Saga</h5><ul><li>StartSaga - SageEventHandler - EndSaga</li><li>使用associate将不同的事件关联到同一个Saga流程中</li><li>正常的结束都通过EndSaga标签触发,超时使用EventScheduler,触发一个EndSaga</li><li>一个业务流程的执行对应一个saga实例</li><li>Saga实例状态和关联的事件会保证在数据库中</li></ul><h4 id="Axon分布式Event设计"><a href="#Axon分布式Event设计" class="headerlink" title="Axon分布式Event设计"></a>Axon分布式Event设计</h4><ul><li>聚合类上的Event Handler是本地处理,通过AMQP触发</li><li>聚合类上是处理完Event,在通过AMQP分发</li><li>每个服务监听各自的队列</li><li>每个事件只会被处理一次</li><li>每个EventHandler处理过的Event,都会保存在该服务的数据库中</li><li>Saga负责流程编排,Aggregate用于处理数据状态</li><li>Saga要负责处理流程内的所有事件</li><li>Saga处理的事件不会保存在domain_event表中</li><li>每个saga对象也会序列化后保存在数据库中</li><li>saga所在的服务可以实现分布式部署</li></ul><h2 id="分布式事务实现总结"><a href="#分布式事务实现总结" class="headerlink" title="分布式事务实现总结"></a>分布式事务实现总结</h2><ul><li>保证高可用:网络,分布式部署</li><li>保证事务同步:同步多数据源的事务</li><li>保证幂等性:通过重试解决大部分错误</li><li>合理设计流程:条件检查,预留资源,业务操作,完成资源</li></ul>]]></content>
      
      
      <categories>
          
          <category> 事务 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socks5搭建</title>
      <link href="/posts/e2c8b11c/"/>
      <url>/posts/e2c8b11c/</url>
      
        <content type="html"><![CDATA[<h6 id="Socks5下载"><a href="#Socks5下载" class="headerlink" title="Socks5下载"></a>Socks5下载</h6><p>下载地址：<a href="http://sourceforge.net/projects/ss5/files/" target="_blank" rel="noopener">http://sourceforge.net/projects/ss5/files/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#通过yum安装ss5 依赖包：</span><br><span class="line">yum install gcc openldap-devel pam-devel openssl-devel</span><br><span class="line"></span><br><span class="line"># 解压,&quot;ss5-3.8.9-8.tar.gz&quot;是刚才下载的压缩包</span><br><span class="line"># -v过程显示文件 -z解压/压缩gzip -x解压操作 -f 后面加要操作的文件</span><br><span class="line">tar -vzx -f ss5-3.8.9-8.tar.gz</span><br><span class="line"></span><br><span class="line">cd ss5-3.8.9/</span><br><span class="line"></span><br><span class="line"># configure是一个shell脚本</span><br><span class="line"># 主要的作用是对即将安装的程序进行配置，</span><br><span class="line"># 检查当前的环境是否满足要安装程序的依赖关系.</span><br><span class="line"># 如果系统环境合适，就会生成makefile，否则会报错。</span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"># make是一个命令工具</span><br><span class="line"># 解释 Makefile 中的规则。</span><br><span class="line"># Makefile文件中描述了整个工程所有文件的编译顺序、编译规则。</span><br><span class="line"># 实际上make是执行Makefile中的第一条命令</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">#接下来开始安装刚刚编译的程序：</span><br><span class="line">#执行Makefile中的install</span><br><span class="line">#这些都可以在Makefile文件中看到</span><br><span class="line">#可以使用vim Makefile查看文件</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">#启动脚本加执行权限</span><br><span class="line">chmod +x /etc/init.d/ss5</span><br><span class="line">设置监听端口</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/ss5  </span><br><span class="line"># Add startup option here  </span><br><span class="line">SS5_OPTS=&quot; -u root -b 0.0.0.0:2233&quot;</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">service start ss5</span><br><span class="line"></span><br><span class="line">#使用用户名密码登录，修改配置文件中的两行</span><br><span class="line">vi /etc/opt/ss5/ss5.conf  </span><br><span class="line">auth 0.0.0.0/0 - u  </span><br><span class="line">permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</span><br><span class="line"></span><br><span class="line">#用户名和密码，一个用户和密码一行，用空格间隔</span><br><span class="line">vi /etc/opt/ss5/ss5.passwd  </span><br><span class="line">user1 123</span><br><span class="line">user2 123</span><br><span class="line"></span><br><span class="line"># 重启服务</span><br><span class="line">service restart ss5</span><br></pre></td></tr></table></figure><p>代理使用工具：Proxifier </p><p>配置: 配置文件-&gt;代理服务器-&gt;添加<br><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/3.png" alt="image"></p><p>自定义代理规则（微信代理为案例）：配置文件-&gt;代理规则-&gt;添加</p><p><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/4.png" alt="image"></p><p>如果工具无法代理则:<br><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/5.png" alt="image"><br>然后重启电脑</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frp内网穿透搭建和使用</title>
      <link href="/posts/dbd6de1a/"/>
      <url>/posts/dbd6de1a/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一-简介和注意点"><a href="#一-简介和注意点" class="headerlink" title="一. 简介和注意点"></a>一. 简介和注意点</h1><ul><li><a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">官方中文文档地址</a></li><li><a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">安装包下载地址</a></li></ul><h1 id="二-搭建部署-0-24-1"><a href="#二-搭建部署-0-24-1" class="headerlink" title="二. 搭建部署(0.24.1)"></a>二. 搭建部署(0.24.1)</h1><h2 id="1-服务端部署"><a href="#1-服务端部署" class="headerlink" title="1. 服务端部署"></a>1. 服务端部署</h2><h3 id="第一种部署方式-安装包"><a href="#第一种部署方式-安装包" class="headerlink" title="第一种部署方式:安装包"></a>第一种部署方式:安装包</h3><ol><li><p>下载安装包</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置shell环境变量frp版本</span></span><br><span class="line"><span class="built_in">export</span> FRP_VERSION=0.24.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并解压为frps</span></span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v<span class="variable">$&#123;FRP_VERSION&#125;</span>/frp_<span class="variable">$&#123;FRP_VERSION&#125;</span>_linux_amd64.tar.gz \</span><br><span class="line">&amp;&amp; tar -xf frp_<span class="variable">$&#123;FRP_VERSION&#125;</span>_linux_amd64.tar.gz \</span><br><span class="line">&amp;&amp; mkdir frps \</span><br><span class="line">&amp;&amp; cp frp_<span class="variable">$&#123;FRP_VERSION&#125;</span>_linux_amd64/frps* frps/ \</span><br><span class="line">&amp;&amp; rm -rf frp_<span class="variable">$&#123;FRP_VERSION&#125;</span>_linux_amd64*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> frps</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件<code>frps.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [common] is integral section</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 服务ip地址</span></span><br><span class="line"><span class="comment"># frp的服务端口号</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># udp 端口</span></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kcp绑定的端口,可以和 bind_port 一样</span></span><br><span class="line"><span class="attr">kcp_bind_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># specify which address proxy will listen for, default value is same with bind_addr</span></span><br><span class="line"><span class="comment"># proxy_bind_addr = 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置http和https穿透的服务端口</span></span><br><span class="line"><span class="comment"># 注意:http端口和https端口可以与bind_port相同</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http服务器响应头超时(秒)，默认为60s</span></span><br><span class="line"><span class="comment"># vhost_http_timeout = 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frps控制台</span></span><br><span class="line"><span class="comment"># dashboard_addr的默认值与bind_addr相同</span></span><br><span class="line"><span class="comment"># 只有设置了dashboard_port，仪表板才可用</span></span><br><span class="line"><span class="attr">dashboard_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frps控制台 用户名密码，默认都为 admin</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line"><span class="attr">log_file</span> = ./frps.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志级别:trace, debug, info, warn, error</span></span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志保存天数</span></span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frps的认证密码，用于客户端连接</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># heartbeat configure, it's not recommended to modify the default value</span></span><br><span class="line"><span class="comment"># the default value of heartbeat_timeout is 90</span></span><br><span class="line"><span class="comment"># heartbeat_timeout = 90</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  可以配置允许使用的某个指定端口或者是一个范围内的所有端口，以 , 分隔，指定的范围以 - 分隔。</span></span><br><span class="line"><span class="comment"># allow_ports = 2000-3000,3001,3003,4000-50000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置每个代理可以创建的连接池上限,客户端设置超过此配置后会被调整到当前</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个客户端可以使用最大端口，默认值为0表示没有限制</span></span><br><span class="line"><span class="attr">max_ports_per_client</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frps子域名设置，默认为空，可以输入类似abc.com这样的域名</span></span><br><span class="line"><span class="attr">subdomain_host</span> = </span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否tcp流多路复用</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>systemctl来控制启动，并且加入自启</p></li></ol><ul><li><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /lib/systemd/system/frps.service</span><br></pre></td></tr></table></figure></li><li><p>加入内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=fraps service</span><br><span class="line">After=network.target syslog.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">#启动服务的命令（此处写你的frps的实际安装目录）</span><br><span class="line">ExecStart=/your/path/frps -c /your/path/frps.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>自启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启动命令</span><br><span class="line">systemctl start frps </span><br><span class="line"># 自启动设置 </span><br><span class="line">systemctl enable frps</span><br></pre></td></tr></table></figure></li></ul><h3 id="第二种部署方式-docker"><a href="#第二种部署方式-docker" class="headerlink" title="第二种部署方式:docker"></a>第二种部署方式:docker</h3><ol><li>docker配置地址:<a href="https://github.com/chcGolang/frps" target="_blank" rel="noopener">https://github.com/chcGolang/frps</a></li><li>DockerHub地址:<a href="https://hub.docker.com/r/chcgolang/frps" target="_blank" rel="noopener">https://hub.docker.com/r/chcgolang/frps</a></li></ol><h2 id="2-域名配置"><a href="#2-域名配置" class="headerlink" title="2. 域名配置"></a>2. 域名配置</h2><p><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/%E4%BE%BF%E5%88%A9%E6%80%A7%E5%B7%A5%E5%85%B7/%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE.png" alt="image"></p><h2 id="2-客户端部署"><a href="#2-客户端部署" class="headerlink" title="2. 客户端部署"></a>2. 客户端部署</h2><h3 id="1-安装包的方式部署"><a href="#1-安装包的方式部署" class="headerlink" title="1. 安装包的方式部署"></a>1. 安装包的方式部署</h3><ol><li><p>linux</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置shell环境变量frp版本</span></span><br><span class="line"><span class="built_in">export</span> FRP_VERSION=0.24.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并解压为frps</span></span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v<span class="variable">$&#123;FRP_VERSION&#125;</span>/frp_<span class="variable">$&#123;FRP_VERSION&#125;</span>_linux_amd64.tar.gz \</span><br><span class="line">&amp;&amp; tar -xf frp_<span class="variable">$&#123;FRP_VERSION&#125;</span>_linux_amd64.tar.gz \</span><br><span class="line">&amp;&amp; mkdir frpc \</span><br><span class="line">&amp;&amp; cp frp_<span class="variable">$&#123;FRP_VERSION&#125;</span>_linux_amd64/frpc* frpc/ \</span><br><span class="line">&amp;&amp; rm -rf frp_<span class="variable">$&#123;FRP_VERSION&#125;</span>_linux_amd64*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> frpc</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [common] is integral section</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 服务端的公网IP和端口号</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过http代理或者socks5代理来连接frps，你可以在这里或者全局环境变量中设置http_proxy</span></span><br><span class="line"><span class="comment"># 仅在 protocol = tcp 时生效。</span></span><br><span class="line"><span class="comment"># http_proxy = http://user:passwd@192.168.1.128:8080</span></span><br><span class="line"><span class="comment"># http_proxy = socks5://user:passwd@192.168.1.128:1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志记录文件</span></span><br><span class="line"><span class="comment"># log_file = ./frpc.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志级别trace, debug, info, warn, error</span></span><br><span class="line"><span class="comment"># log_level = info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志保存天数</span></span><br><span class="line"><span class="comment"># log_max_days = 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frps的认证密码</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端管理视图</span></span><br><span class="line"><span class="attr">admin_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">admin_port</span> = <span class="number">7400</span></span><br><span class="line"><span class="attr">admin_user</span> = admin</span><br><span class="line"><span class="attr">admin_pwd</span> = admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端预先建立连接</span></span><br><span class="line"><span class="attr">pool_count</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp流多路复用，必须与frps相同</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理名称将更改为&#123;user&#125;。</span></span><br><span class="line"><span class="attr">user</span> = your_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 决定是否退出程序时，第一次登录失败，否则继续重新登录到frps</span></span><br><span class="line"><span class="attr">login_fail_exit</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于连接服务器的通信协议</span></span><br><span class="line"><span class="comment"># 现在它支持tcp和kcp以及websocket</span></span><br><span class="line"><span class="attr">protocol</span> = tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># specify a dns server, so frpc will use this instead of default one</span></span><br><span class="line"><span class="comment"># dns_server = 8.8.8.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定dns服务器，因此frpc将使用此服务器而不是默认服务器</span></span><br><span class="line"><span class="comment"># start = ssh,dns</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># heartbeat配置，不建议修改默认值</span></span><br><span class="line"><span class="comment"># the default value of heartbeat_interval is 10 and heartbeat_timeout is 90</span></span><br><span class="line"><span class="comment"># heartbeat_interval = 30</span></span><br><span class="line"><span class="comment"># heartbeat_timeout = 90</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh连接[里面的内容是唯一的]</span></span><br><span class="line"><span class="comment"># 如果[common]中的user不为空，则将其更改为&#123;user&#125;.&#123;proxy&#125;如'your_name.ssh</span></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="comment"># 连接类型:tcp | udp | http | https | stcp | xtcp</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frps和frpc之间的消息将被加密</span></span><br><span class="line"><span class="comment"># 如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了 ssh 协议等，通过设置 use_encryption = true，将 frpc 与 frps 之间的通信内容加密传输，将会有效防止流量被拦截。</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment"># 压缩传输的数据</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remote port listen by frps</span></span><br><span class="line"><span class="comment"># remote_port = 6001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># frps will load balancing connections for proxies in same group</span></span><br><span class="line"><span class="comment"># group = test_group</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># group should have same group key</span></span><br><span class="line"><span class="comment"># group_key = 123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用健康检查，类型为 tcp</span></span><br><span class="line"><span class="comment"># health_check_type = tcp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立连接超时时间(秒)</span></span><br><span class="line"><span class="comment"># health_check_timeout_s = 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续 3 次检查失败，此 proxy 会被摘除</span></span><br><span class="line"><span class="comment"># health_check_max_failed = 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔 10 秒进行一次健康检查</span></span><br><span class="line"><span class="comment"># health_check_interval_s = 10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh_random]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="comment"># if remote_port is 0, frps will assign a random port for you</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if you want to expose multiple ports, add 'range:' prefix to the section name</span></span><br><span class="line"><span class="comment"># frpc will generate multiple proxies such as 'tcp_port_6010', 'tcp_port_6011' and so on.</span></span><br><span class="line"><span class="section">[range:tcp_port]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">6010</span>-<span class="number">6020</span>,<span class="number">6022</span>,<span class="number">6024</span>-<span class="number">6028</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6010</span>-<span class="number">6020</span>,<span class="number">6022</span>,<span class="number">6024</span>-<span class="number">6028</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转发 DNS 查询请求</span></span><br><span class="line"><span class="section">[dns]</span></span><br><span class="line"><span class="attr">type</span> = udp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">114.114</span>.<span class="number">114.114</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">53</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6002</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转发udp请求</span></span><br><span class="line"><span class="section">[range:udp_port]</span></span><br><span class="line"><span class="attr">type</span> = udp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">6010</span>-<span class="number">6020</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6010</span>-<span class="number">6020</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Resolve your domain names to [server_addr] so you can use http://web01.yourdomain.com to browse web01 and http://web02.yourdomain.com to browse web02</span></span><br><span class="line"><span class="section">[web01]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># http username and password are safety certification for http protocol</span></span><br><span class="line"><span class="comment"># if not set, you can access this custom_domains without certification</span></span><br><span class="line"><span class="attr">http_user</span> = admin</span><br><span class="line"><span class="attr">http_pwd</span> = admin</span><br><span class="line"><span class="comment"># if domain for frps is frps.com, then you can access [web01] proxy by URL http://test.frps.com</span></span><br><span class="line"><span class="attr">subdomain</span> = web01</span><br><span class="line"><span class="attr">custom_domains</span> = web02.yourdomain.com</span><br><span class="line"><span class="comment"># locations is only available for http type</span></span><br><span class="line"><span class="attr">locations</span> = /,/pic</span><br><span class="line"><span class="attr">host_header_rewrite</span> = example.com</span><br><span class="line"><span class="comment"># params with prefix "header_" will be used to update http request headers</span></span><br><span class="line"><span class="attr">header_X-From-Where</span> = frp</span><br><span class="line"><span class="attr">health_check_type</span> = http</span><br><span class="line"><span class="comment"># frpc will send a GET http request '/status' to local http service</span></span><br><span class="line"><span class="comment"># http service is alive when it return 2xx http response code</span></span><br><span class="line"><span class="attr">health_check_url</span> = /status</span><br><span class="line"><span class="attr">health_check_interval_s</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">health_check_max_failed</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">health_check_timeout_s</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="section">[web02]</span></span><br><span class="line"><span class="attr">type</span> = https</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8000</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">subdomain</span> = web01</span><br><span class="line"><span class="comment"># 访问的域名</span></span><br><span class="line"><span class="attr">custom_domains</span> = web02.yourdomain.com</span><br><span class="line"></span><br><span class="line"><span class="section">[plugin_unix_domain_socket]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6003</span></span><br><span class="line"><span class="comment"># if plugin is defined, local_ip and local_port is useless</span></span><br><span class="line"><span class="comment"># plugin will handle connections got from frps</span></span><br><span class="line"><span class="attr">plugin</span> = unix_domain_socket</span><br><span class="line"><span class="comment"># params with prefix "plugin_" that plugin needed</span></span><br><span class="line"><span class="attr">plugin_unix_path</span> = /var/run/docker.sock</span><br><span class="line"></span><br><span class="line"><span class="section">[plugin_http_proxy]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6004</span></span><br><span class="line"><span class="attr">plugin</span> = http_proxy</span><br><span class="line"><span class="attr">plugin_http_user</span> = abc</span><br><span class="line"><span class="attr">plugin_http_passwd</span> = abc</span><br><span class="line"></span><br><span class="line"><span class="section">[plugin_socks5]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6005</span></span><br><span class="line"><span class="attr">plugin</span> = socks5</span><br><span class="line"><span class="attr">plugin_user</span> = abc</span><br><span class="line"><span class="attr">plugin_passwd</span> = abc</span><br><span class="line"></span><br><span class="line"><span class="section">[plugin_static_file]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6006</span></span><br><span class="line"><span class="attr">plugin</span> = static_file</span><br><span class="line"><span class="attr">plugin_local_path</span> = /var/www/blog</span><br><span class="line"><span class="attr">plugin_strip_prefix</span> = static</span><br><span class="line"><span class="attr">plugin_http_user</span> = abc</span><br><span class="line"><span class="attr">plugin_http_passwd</span> = abc</span><br><span class="line"></span><br><span class="line"><span class="section">[secret_tcp]</span></span><br><span class="line"><span class="comment"># If the type is secret tcp, remote_port is useless</span></span><br><span class="line"><span class="comment"># Who want to connect local port should deploy another frpc with stcp proxy and role is visitor</span></span><br><span class="line"><span class="attr">type</span> = stcp</span><br><span class="line"><span class="comment"># sk used for authentication for visitors</span></span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># user of frpc should be same in both stcp server and stcp visitor</span></span><br><span class="line"><span class="section">[secret_tcp_visitor]</span></span><br><span class="line"><span class="comment"># frpc role visitor -&gt; frps -&gt; frpc role server</span></span><br><span class="line"><span class="attr">role</span> = visitor</span><br><span class="line"><span class="attr">type</span> = stcp</span><br><span class="line"><span class="comment"># the server name you want to visitor</span></span><br><span class="line"><span class="attr">server_name</span> = secret_tcp</span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="comment"># connect this address to visitor stcp server</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">9000</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[p2p_tcp]</span></span><br><span class="line"><span class="attr">type</span> = xtcp</span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[p2p_tcp_visitor]</span></span><br><span class="line"><span class="attr">role</span> = visitor</span><br><span class="line"><span class="attr">type</span> = xtcp</span><br><span class="line"><span class="attr">server_name</span> = p2p_tcp</span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">9001</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># windows</span><br><span class="line">frpc.exe -c frpc.ini</span><br><span class="line"># linux</span><br><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-路由器梅林固件部署"><a href="#2-路由器梅林固件部署" class="headerlink" title="2. 路由器梅林固件部署"></a>2. 路由器梅林固件部署</h3><ol><li>在软件中心安装 <strong>frpc穿透</strong> 的软件<br> <img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/%E4%BE%BF%E5%88%A9%E6%80%A7%E5%B7%A5%E5%85%B7/frpc%E5%B7%A5%E5%85%B7.png" alt="image"></li><li>进入进行配置就可以了</li></ol><h1 id="四-自己的frp服务端"><a href="#四-自己的frp服务端" class="headerlink" title="四. 自己的frp服务端"></a>四. 自己的frp服务端</h1><h2 id="1-frps-chc-cn"><a href="#1-frps-chc-cn" class="headerlink" title="1. frps.chc.cn"></a>1. frps.chc.cn</h2><ul><li>ip : 127.0.0.1</li></ul><table><thead><tr><th>Docker内定义</th><th>内容</th><th>描述</th></tr></thead><tbody><tr><td>bind_port</td><td>30000(TCP)</td><td>frps服务端口</td></tr><tr><td>kcp_bind_port</td><td>30000(UDP)</td><td>KCP加速端口</td></tr><tr><td>bind_udp_port</td><td>30001(UDP)</td><td>udp端口帮助udp洞洞穿nat</td></tr><tr><td>dashboard_port</td><td>30002(TCP)</td><td>Frps控制台端口</td></tr><tr><td>vhost_http_port</td><td>30000(TCP)</td><td>http穿透的端口。</td></tr><tr><td>vhost_https_port</td><td>30000(TCP)</td><td>https穿透服务的端口</td></tr><tr><td>token</td><td>teamfort</td><td>连接认证码</td></tr><tr><td>dashboard_user</td><td>teamfort</td><td>frps控制台用户名</td></tr><tr><td>dashboard_pwd</td><td>teamfort</td><td>frps控制台密码</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud使用总结</title>
      <link href="/posts/774b3897/"/>
      <url>/posts/774b3897/</url>
      
        <content type="html"><![CDATA[<h1 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h1><p><a href="https://github.com/chcGolang/SpringCloud_Test" target="_blank" rel="noopener">SpringCloud总结</a></p><h1 id="微服务架构组成"><a href="#微服务架构组成" class="headerlink" title="微服务架构组成"></a>微服务架构组成</h1><ul><li>服务</li><li>服务注册中心</li><li>网关</li><li>服务间调用协议</li></ul><h1 id="Springcloud微服务架构"><a href="#Springcloud微服务架构" class="headerlink" title="Springcloud微服务架构"></a>Springcloud微服务架构</h1><ul><li>spring cloud Netflix 微服务架构</li><li>spring cloud Config 配置服务中心</li><li>spring cloud Bus 事件总线</li></ul><h2 id="Spring-Cloud-Netflix-微服务架构"><a href="#Spring-Cloud-Netflix-微服务架构" class="headerlink" title="Spring Cloud Netflix 微服务架构"></a>Spring Cloud Netflix 微服务架构</h2><ul><li>服务注册中心:Eureka</li><li>网关: Zuul</li><li>声明式Rest调用接口:Feign Client</li><li>负载均衡:Ribbon</li><li>监控,熔断组件:Hystrix与Hystrix Dashboard</li></ul><h2 id="Spring-cloud-Config-配置服务"><a href="#Spring-cloud-Config-配置服务" class="headerlink" title="Spring cloud Config 配置服务"></a>Spring cloud Config 配置服务</h2><ul><li>配置:文件夹,git,svn,db</li><li>配置服务器</li><li>服务 -&gt; 配置服务器 -&gt; 配置</li><li>配置加密</li></ul><h2 id="Spring-cloud-Zuul-网关服务"><a href="#Spring-cloud-Zuul-网关服务" class="headerlink" title="Spring cloud Zuul 网关服务"></a>Spring cloud Zuul 网关服务</h2><ol><li>zuul服务的生命周期<br><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/spring-cloud/zuul%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.PNG" alt="image"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pre filters:在请求被路由之前调用</span><br><span class="line">Routing filters:路由请求的作用</span><br><span class="line">Post filters:路由到微服务以后执行</span><br></pre></td></tr></table></figure></li></ol><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="1-Cannot-execute-request-on-any-known-server"><a href="#1-Cannot-execute-request-on-any-known-server" class="headerlink" title="1. Cannot execute request on any known server"></a>1. Cannot execute request on any known server</h2><ul><li>原因:未到注册到服务中心</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“eureka.client.service-url.”指定服务注册中心地址，类型为 HashMap，并设置有一组默认值，默认的Key为 defaultZone；默认的Value为http://localhost:8761/eureka ，如果服务注册中心为高可用集群时，多个注册中心地址以逗号分隔</span><br><span class="line">eureka.client.service-url.defaultZone</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果服务注册中心加入了安全验证，这里配置的地址格式为： http://&lt;username&gt;:&lt;password&gt;@localhost:8761/eureka 其中 &lt;username&gt; 为安全校验的用户名；&lt;password&gt; 为该用户的密码</span><br></pre></td></tr></table></figure><h2 id="2-Eureka-Client-启动后自动停止"><a href="#2-Eureka-Client-启动后自动停止" class="headerlink" title="2. Eureka-Client 启动后自动停止"></a>2. Eureka-Client 启动后自动停止</h2><p>在pom文件中添加如下内容即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- web应用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-自定义的统一配置信息无法刷新"><a href="#3-自定义的统一配置信息无法刷新" class="headerlink" title="3. 自定义的统一配置信息无法刷新"></a>3. 自定义的统一配置信息无法刷新</h2><ul><li>要在使用自定义统一配置的类的头部加入<code>@RefreshScope</code></li></ul><h2 id="4-Eureka2-x-配置连接密码"><a href="#4-Eureka2-x-配置连接密码" class="headerlink" title="4. Eureka2.x 配置连接密码"></a>4. Eureka2.x 配置连接密码</h2><ul><li><code>https://www.jianshu.com/p/a40219751264</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java的23种设计模式</title>
      <link href="/posts/5e103278/"/>
      <url>/posts/5e103278/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式的源码地址"><a href="#设计模式的源码地址" class="headerlink" title="设计模式的源码地址"></a>设计模式的源码地址</h1><p><a href="https://github.com/chcGolang/java_design_coding" target="_blank" rel="noopener">设计模式Github源码</a></p><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:定义一个创建对象的接口,但让实现这个接口的类来决定实例化哪个类,工厂方法让类的实例化推迟到子类中进行</li><li>类型:创建型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>创建对象需要大量重复的代码</li><li>客户端(应用层)不依赖于产品类实例如何被创建,实现等细节</li><li>一个类通过其子类来指定创建哪个对象</li></ul><p><strong>3. 优点</strong></p><ul><li>用户只需要关心所需产品对应的工厂,无须关心创建细节</li><li>加入新产品符合开闭原则,提高可扩展性</li></ul><p><strong>4. 缺点</strong></p><ul><li>类的个数容易过多,增加复杂度</li><li>增加了系统的抽象性和理解难度</li></ul><h1 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:抽象工厂模式提供创建一系列相关或相互依赖对象的接口</li><li>无须指定他们具体的类</li><li>类型:创建型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>客户端(应用层)不依赖于产品类实例如何被创建,实现等细节</li><li>强调一系列相关的产品对象(属于同一产品族)一起使用创建对象需要大量重复的代码</li><li>提供一个产品类的库,所有的产品以同样的接口出现,从而使客户端不依赖于具体实现</li></ul><p><strong>3. 优点</strong></p><ul><li>具体产品在应用辰代码隔离,无须关心创建细节</li><li>将一个系列的产品族统一到一起创建</li></ul><p><strong>4. 缺点</strong></p><ul><li>规定了所有可能被创建的产品集合,产品族中扩展新的产品困难,需要修改抽象工厂的接口</li><li>增加了系统的抽象性和理解难度</li></ul><h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:将一个复杂对象的构建与它的表示分类,使得同样的构建过程可以创建不同的表示</li><li>用户只需指定需要建造的类型就可以得到它们,建造过程及细节不需要知道</li><li>类型:创建型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>如果一个对象有非常复杂的内部结构(很多属性)</li><li>想把复杂对象的创建和使用分离</li></ul><p><strong>3. 优点</strong></p><ul><li>封装性好,创建和使用分离</li><li>扩展性好,建造类之间独立,一定程度上解耦</li></ul><p><strong>4. 缺点</strong></p><ul><li>产生多余的Builder对象</li><li>产品内部发生变化,建造者都要修改,成本较大</li></ul><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:保证一个类仅有一个实例,并提供一个全局访问点</li><li>类型:创建型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>想确保任何情况下都绝对只有一个实例</li></ul><p><strong>3. 优点</strong></p><ul><li>在内存里只有一个实例,减少了内存开销</li><li>可以避免对资源的多重占用</li><li>设置全局访问点,严格控制访问</li></ul><p><strong>4. 缺点</strong></p><ul><li>没有接口,扩展困难</li></ul><p><strong>5. 重点</strong></p><ul><li>私有构造器</li><li>线程安全</li><li>延迟加载 </li><li>序列化和反序列化安全</li><li>反射</li></ul><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:指原型实例指定创建对象的种类,并且通过拷贝这些原型创建新对象</li><li>不需要知道任何创建的细节,不调用构造函数\</li><li>类型:创建型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>类初始化消耗较多资源</li><li>new产生的一个对象需要非常繁琐的过程(数据准备,访问权限等)</li><li>构造函数比较复杂</li><li>循环体中产生大量的对象</li></ul><p><strong>3. 优点</strong></p><ul><li>原型模式性能比直接new一个对象性能高</li><li>简化创建过程</li></ul><p><strong>4. 缺点</strong></p><ul><li>必须配备克隆方法</li><li>对克隆复杂对象或对克隆出的对象进行复杂改造时,容易引入风险</li></ul><p><strong>5. 扩展</strong></p><ul><li>深克隆</li><li>浅克隆</li></ul><h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:又叫门面模式,提供一个统一的接口,用来访问子系统中的一群接口</li><li>外观模式定义了一个高层接口,让子系统更容易使用</li><li>类型:结构型</li></ul><p><strong>2. 使用场景</strong></p><ul><li>子系统越来越复杂,增加外观模式提供简单调用接口</li><li>构建多层系统结构,利用外观对象作为每层的入口,简化层间调用</li></ul><p><strong>3. 优点</strong></p><ul><li>简化了调用过程,无需了解深入子系统,防止带来风险</li><li>减少系统依赖,松散耦合</li><li>更好的划分层次</li><li>符合迪米特法则,即最少知道原则</li></ul><p><strong>4. 缺点</strong></p><ul><li>增加子系统,扩展子系统行为容易引入风险</li><li>不符合开闭原则</li></ul><h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:在不改变原有对象的基础之上,将功能附加到对象上</li><li>提供了不继承更有弹性的替代方案(扩展原有对象功能)</li><li>类型:结构型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>扩展一个类的功能或给一个类添加附加职责</li><li>动态的给一个对象添加功能,这些功能可以再动态的撤销</li></ul><p><strong>3. 优点</strong></p><ul><li>继承的有力补充,比继承灵活,不改变原有对象的情况下给一个对象扩展功能</li><li>通过使用不同装饰类以及这些装饰类的排列组合,可以实现不同效果</li><li>符合开闭原则</li></ul><p><strong>4. 缺点</strong></p><ul><li>会出现更多的代码,更多的类,增加程序复杂性</li><li>动态装饰时,多层装饰时会更复杂</li></ul><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:将一个类的接口转换成客户期望的另一个接口</li><li>使原本接口不兼容的类可以一起工作</li><li>类型:结构型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>已经存在的类,它的方法和需求不匹配时(方法结构相同或类似)</li><li>不是软件设计阶段考虑的设计模式,是随着软件维护,由于不同产品,不同厂家造成功能类似而接口不相同情况下的解决方案</li></ul><p><strong>3. 优点</strong></p><ul><li>能提高类的透明性和复用,现有的类复用但不需要改变</li><li>目标类和适配类解耦,提高程序扩展性</li><li>符合开闭原则</li></ul><p><strong>4. 缺点</strong></p><ul><li>适配器编写过程需要全民考虑,可能会增加系统的复杂性</li><li>增加系统代码可读的难度</li></ul><p><strong>5. 扩展</strong></p><ul><li>对象适配器</li><li>类适配器</li></ul><h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:提供了减少对象数量从而改善应用所需的对象结构的方式</li><li>运用共享技术有效地支持大量细粒度的对象</li><li>类型:结构型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>常常用于系统底层的开发,以便解决系统的性能问题</li><li>系统有大量相似对象,需要缓冲池的场景</li></ul><p><strong>3. 优点</strong></p><ul><li>减少对象的创建,降低内存中对象的数量,降低系统的内存,提高效率</li><li>减少内存之外的其他资源占有</li></ul><p><strong>4. 缺点</strong></p><ul><li>关注内/外部状态,关注线程安全问题</li><li>是系统,程序的逻辑复杂化</li></ul><p><strong>5. 扩展</strong></p><ul><li>内部状态</li><li>外部状态 </li></ul><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:将对象组合成树型结构以表示”部分-整体”的层次结构</li><li>组合模式使客户端对单个对象和组合对象保持一致的方式处理</li><li>类型:结构型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>希望客户端可以忽略组合对象和单个对象的差异时</li><li>处理一个树形结构时</li></ul><p><strong>3. 优点</strong></p><ul><li>清除地定义层次的复杂对象,表示对象的全部或部分层次</li><li>让客户端忽略了层次的差异,方便对整个层次结构进行控制</li><li>简化客户端代码</li><li>符合开闭原则</li></ul><p><strong>4. 缺点</strong></p><ul><li>限制类型时会较为复杂</li><li>是设计变得更加抽象</li></ul><h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:将抽象部分与它的具体实现部分分离,使它们都可以独立地变化</li><li>通过组合的方式建立两个类之间联系,而不是继承</li><li>类型:结构型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>抽象和具体实现之间增加更多的灵活性</li><li>一个类存在两个(或多个)独立变化的维度,且这两个(或多个)</li><li>不希望使用继承,或因为多层继承导致系统类的个数剧增</li></ul><p><strong>3. 优点</strong></p><ul><li>分离抽象部分及具体实现部分</li><li>提高了系统的可扩展性</li><li>符合开闭原则</li><li>符合合成复用原则</li></ul><p><strong>4. 缺点</strong></p><ul><li>增加了系统的理解与设计难度</li><li>需要正确地识别出系统中两个独立变化的维度</li></ul><h1 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:定义了一个算法的骨架,并允许子类为一个或多个步骤提供实现</li><li>模板方法使子类可以在不改变算法结构的情况下,重新定义算法的某些步骤</li><li>类型:行为型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>一次性实现一个算法的不变的部分,并将可变的行为留给子类来实现</li><li>各子类中公共的行为被提取出来并集中到一个公共父类中,从而避免代码重复</li></ul><p><strong>3. 优点</strong></p><ul><li>提高复用性</li><li>提高扩展性</li><li>符合开闭原则</li></ul><p><strong>4. 缺点</strong></p><ul><li>类数目增加</li><li>增加了系统实现的复杂度</li><li>继承关系自身缺点,如果父类添加新的抽象方法,所有子类都要改一遍</li></ul><h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:提供一种方法,顺序访问一个集合对象中的各个元素,而又不暴露该对象的内部表示</li><li>类型:行为型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>访问一个集合对象的内容而无暴露它的内部表示</li><li>为遍历不同的集合结构提供一个统一的接口</li></ul><p><strong>3. 优点</strong></p><ul><li>分离了集合对象的遍历行为</li></ul><p><strong>4. 缺点</strong></p><ul><li>类的个数成对增加</li></ul><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:定义了算法家族,分别封装起来,让它们之间可以相互替换,此模式让算法的变化不会影响到使用算法的用户</li><li>类型: 行为型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>系统有很多类,而他们的区别仅仅在于他们的行为不同</li><li>一个系统需要动态地在几种算法中选择一种</li></ul><p><strong>3. 优点</strong></p><ul><li>开闭原则</li><li>避免使用多重条件转移语句</li><li>提高算法的保密性和安全性</li></ul><p><strong>4. 缺点</strong></p><ul><li>客户端必须知道所有的策略类,并自行决定使用哪个策略类</li><li>产生很多策略类</li></ul><h1 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:给定义一个语言,定义它的文法的一种表示,并定义一个解释器,这解释器使用该表示来解释语言中的句子</li><li>为了解释一种语言,而为语言创建的解释器</li><li>类型: 行为型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>某个特定类型问题发生频率足够高</li></ul><p><strong>2. 优点</strong></p><ul><li>语法由很多类表示,容易改变及扩展此语言</li></ul><p><strong>3. 缺点</strong></p><ul><li>当语法规则数目太多时,增加了系统复杂度</li></ul><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:定义了对象之间的一对多依赖,让多个观察者对象同时监听某一个主题对象,当主题对象发送变化时,它的所有依赖者(观察者)都会收到通知并更新</li><li>类型:行为型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>关联行为场景,建立一套触发机制</li></ul><p><strong>3. 优点</strong></p><ul><li>观察者和被观察者之间建立一个抽象的耦合</li><li>观察者模式支持广播通信</li></ul><p><strong>4. 缺点</strong></p><ul><li>观察者之间有过多的细节依赖,提高时间消化及程序复杂度</li><li>使用要得当,要避免循环调用</li></ul><h1 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:保存一个对象的某个状态,以便在适当的时候恢复对象</li><li>后悔药</li><li>类型: 行为型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>保存及恢复数据相关业务场景</li><li>后悔的时候,即想恢复到之前的状态</li></ul><p><strong>3. 优点</strong></p><ul><li>为用户提供一种可恢复机制</li><li>存档信息的封装</li></ul><p><strong>4. 缺点</strong></p><ul><li>资源占有</li></ul><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义:将请求封装成对象,以便使用不同的请求</li><li>命令模式解决了应用程序中对象的职责以及它们之间的通讯方式</li><li>类型:行为型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>请求调用者和请求接收者需要解耦,使得调用者和接收者不直接交互</li><li>需要抽象出等待执行的行为</li></ul><p><strong>3. 优点</strong></p><ul><li>降低耦合</li><li>容易扩展新命令或者一组命令</li></ul><p><strong>4. 缺点</strong></p><ul><li>命令的无限扩展会增加类的数量 提高系统实现复杂度</li></ul><h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>定义一个封装一组对象如何交互的对象</li><li>通过使对象明确地相互引用来促进松散耦合,并允许独立地改变它们的交互</li><li>类型:行为型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>系统中对象之间存在复杂的音乐关系,产生的相互依赖关系结构混乱且难以理解</li><li>交互的公共行为,如果需要改变行为则可以增加新的中介类</li></ul><p><strong>3. 优点</strong></p><ul><li>将一对多转化成一对一,降低程序复杂度</li><li>类之间解耦</li></ul><p><strong>4. 缺点</strong></p><ul><li>中介者过多,导致系统复杂</li></ul><h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>为请求创建一个接收此次请求对象的链</li><li>类型:行为型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>一个请求的处理需要多个对象当中的一个或几个协作处理</li></ul><p><strong>3. 优点</strong></p><ul><li>请求的发送者和接收者(请求的处理)解耦</li><li>责任链可以动态组合</li></ul><p><strong>4. 缺点</strong></p><ul><li>责任链太长或者处理时间过长,影响性能</li><li>责任链有可能过多</li></ul><h1 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>封装作用于某数据结构(如:list/set/map等)中的各元素的操作</li><li>可以在不改变各元素的类的前提下,定义作用于这些元素的操作</li><li>类型:行为型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>一个数据结构(如:list/set/map等)包含很多类型对象</li><li>数据结构与数据操作分离</li></ul><p><strong>3. 优点</strong></p><ul><li>增加新的操作很容易,即增加一个新的访问者</li></ul><p><strong>4. 缺点</strong></p><ul><li>增加新的数据结构困难</li><li>具体元素变更比较麻烦</li></ul><h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><p><strong>1. 定义与类型</strong></p><ul><li>运行一个对象在其内部状态改变时,改变它的行为</li><li>类型:行为型</li></ul><p><strong>2. 适用场景</strong></p><ul><li>一个对象存在多个状态(不同状态下行为不同),且状态可相互转换</li></ul><p><strong>3. 优点</strong></p><ul><li>将不同状态隔离</li><li>把各种状态的转换逻辑,分布到State的子类中,减少相互间依赖</li><li>增加新的状态非常简单</li></ul><p><strong>4. 缺点</strong></p><ul><li>状态多的业务场景导致类数目增加,系统变复杂</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM性能监控与调优</title>
      <link href="/posts/31cced81/"/>
      <url>/posts/31cced81/</url>
      
        <content type="html"><![CDATA[<h1 id="一-JDK命令行工具监控"><a href="#一-JDK命令行工具监控" class="headerlink" title="一. JDK命令行工具监控"></a>一. JDK命令行工具监控</h1><h2 id="0-命令文档地址"><a href="#0-命令文档地址" class="headerlink" title="0. 命令文档地址"></a>0. 命令文档地址</h2><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/index.html</a></p><h2 id="1-XX参数分类"><a href="#1-XX参数分类" class="headerlink" title="1. XX参数分类"></a>1. XX参数分类</h2><ul><li>Boolean类型</li></ul><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F1.png" width="500" hegiht="313" align="center"><ul><li>非Boolean类型</li></ul><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F2.png" width="500" hegiht="313" align="center"><ul><li>-Xmx -Xms(最大内存,最小内存)<ol><li>-Xms等价于-XX.InitialHeapSize</li><li>-Xmx等价于-XX:MaxHeapSize</li></ol></li></ul><h2 id="2-查看JVM运行时参数"><a href="#2-查看JVM运行时参数" class="headerlink" title="2. 查看JVM运行时参数"></a>2. 查看JVM运行时参数</h2><ul><li>-XX:+PrintFlagslnitial 查看初始值情况</li><li>-XX:+PrintFlagsFinal   查看最终值</li><li>-XX:+UnlockExperimentalVMOptions 解锁实验参数</li><li>-XX:+UnlockDiagnosticVMOptions 解锁诊断参数</li><li>-xx:+PrintCommandLineFlags 打印命令行参数</li></ul><h3 id="2-1-PrintFlagsFinal"><a href="#2-1-PrintFlagsFinal" class="headerlink" title="2.1 PrintFlagsFinal"></a>2.1 PrintFlagsFinal</h3><ul><li>=表示默认值, :=被用户或者JVM修改后的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal -version</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-jps"><a href="#2-2-jps" class="headerlink" title="2.2 jps"></a>2.2 jps</h3><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jps.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jps.html</a></p><ul><li><p>jps用法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hostid 命令对应的服务器ip，默认不加参数，代码查看本机</span></span><br><span class="line">jps [参数] [&lt;hostid&gt;]</span><br></pre></td></tr></table></figure></li><li><p>jps参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-q：只输出进程 ID</span><br><span class="line">-m：输出传入 main 方法的参数</span><br><span class="line">-l：输出完全的包名，应用主类名，jar的完全路径名</span><br><span class="line">-v：输出jvm参数</span><br><span class="line">-V：输出通过flag文件传递到JVM中的参数</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-jinfo"><a href="#2-3-jinfo" class="headerlink" title="2.3 jinfo"></a>2.3 jinfo</h3><ol><li><p>功能</p><ul><li>查看JVM参数(常用)</li><li>查看系统参数，即可通过System.getProperty(key)获得的参数(常用)</li><li>修改JVM参数(少用)</li></ul></li><li><p>使用命令</p><ul><li><p>分析pid</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo [option] &#123;pid&#125;</span><br><span class="line"><span class="comment"># pid: 可通过jps或者ps获得</span></span><br></pre></td></tr></table></figure></li><li><p>分析core dump文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jinfo [option] &#123;executable&#125; &#123;core&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># executable: The Java executable from which the core dump was produced.</span></span><br><span class="line"><span class="comment"># core: The core file for which the configuration information is to be printed.</span></span><br></pre></td></tr></table></figure></li><li><p>分析远程进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinfo [option] [ server-id ] &#123;remote-hostname-or-IP&#125;</span><br><span class="line"><span class="comment"># server-id: An optional unique ID to use when multiple debug servers are running on the same remote host.</span></span><br><span class="line"><span class="comment"># remote-hostname-or-IP: 远程服务的IP或者hostname</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>option可选值</p><ul><li><p>no-option:即，没有任何option。会打印所有的JVM参数和系统参数。等同于-flags + -sysprops</p></li><li><p>-flag {name} : 打印指定的JVM参数值。</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag SurvivorRatio 55394</span><br><span class="line"><span class="comment"># 结果为: -XX:SurvivorRatio=8</span></span><br></pre></td></tr></table></figure></li><li><p>-flag [+|-]name : enables or disables指定的VM参数，也就是使指定的VM参数生效或者失效</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag -PrintGCDateStamps 12905</span><br><span class="line"><span class="comment"># 结果为：使PrintGCDateStamps失效</span></span><br></pre></td></tr></table></figure></li><li><p>-flag name=value : 为指定的VM参数(name)设置指定的值(value)</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag MaxHeapFreeRatio=80 12905</span><br><span class="line"><span class="comment"># 再通过jinfo -flag MaxHeapFreeRatio 12905查看其值</span></span><br><span class="line"><span class="comment"># 结果为: -XX:MaxHeapFreeRatio=80</span></span><br></pre></td></tr></table></figure></li><li><p>-flags : 打印所有的VM参数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Non-default VM flags: -XX:CICompilerCount=2 -XX:CMSFullGCsBeforeCompaction=0 -XX:CMSInitiatingOccupancyFraction=80 -XX:+DisableExplicitGC -XX:ErrorFile=null -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=null -XX:InitialCodeCacheSize=134217728 -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxMetaspaceSize=268435456 -XX:MaxNewSize=268435456 -XX:MinHeapDeltaBytes=196608 -XX:NewSize=268435456 -XX:OldPLABSize=16 -XX:OldSize=805306368 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -XX:ReservedCodeCacheSize=134217728 -XX:SurvivorRatio=8 -XX:+UseCMSCompactAtFullCollection -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseFastUnorderedTimeStamps -XX:+UseParNewGC</span><br><span class="line">Command line:  -Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8 -Djava.io.tmpdir=/opt/micheal/tmp -Djava.net.preferIPv6Addresses=false -DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector -Xmx1g -Xms1g -Xmn256m -XX:SurvivorRatio=8 -XX:MaxMetaspaceSize=256m -XX:+HeapDumpOnOutOfMemoryError -XX:ReservedCodeCacheSize=128m -XX:InitialCodeCacheSize=128m -XX:+DisableExplicitGC -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -XX:+UseConcMarkSweepGC -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSFullGCsBeforeCompaction=0 -XX:+UseCMSCompactAtFullCollection -XX:CMSInitiatingOccupancyFraction=80 -Xloggc:/opt/logs/mobile/xm.test.read/xm.test.read.gc.log -XX:ErrorFile=/opt/logs/mobile/xm.test.read/xm.test.read.vmerr.log -XX:HeapDumpPath=/opt/logs/mobile/xm.test.read/xm.test.read.heaperr.log -Djetty.appkey=xm.test.read -Djetty.context=/ -Djetty.logs=/opt/logs/mobile/xm.test.read -Djetty.webroot=/opt/micheal/mobile/xm.test.read/webroot</span><br></pre></td></tr></table></figure></li><li><p>-sysprops : 打印系统参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo -sysprops 12905</span><br></pre></td></tr></table></figure></li><li><p>-h : 帮助信息</p><ul><li>查看最大内存<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1292为进程Id</span></span><br><span class="line">jinfo -flag MaxHeapSize 1292</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><ul><li>查看垃圾回收器  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 1292为进程Id</span><br><span class="line">jinfo -flag UseG1GC 1292</span><br><span class="line">jinfo -flag UseConcMarkSweepGC 1292</span><br><span class="line">jinfo -flag UseParallelGC 1292</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-jstat查看JVM统计信息"><a href="#2-4-jstat查看JVM统计信息" class="headerlink" title="2.4 jstat查看JVM统计信息"></a>2.4 jstat查看JVM统计信息</h3><ul><li><p>用法</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line"><span class="comment"># option： 参数选项</span></span><br><span class="line"><span class="comment"># -t： 可以在打印的列加上Timestamp列，用于显示系统运行的时间</span></span><br><span class="line"><span class="comment"># -h： 可以在周期性数据数据的时候，可以在指定输出多少行以后输出一次表头</span></span><br><span class="line"><span class="comment"># vmid： Virtual Machine ID（ 进程的 pid）</span></span><br><span class="line"><span class="comment"># interval： 执行每次的间隔时间，单位为毫秒</span></span><br><span class="line"><span class="comment"># count： 用于指定输出多少次记录，缺省则会一直打印</span></span><br></pre></td></tr></table></figure></li><li><p>option参数</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-class</td><td>显示ClassLoad的相关信息；</td></tr><tr><td>-compiler</td><td>显示JIT编译的相关信息；</td></tr><tr><td>-gc</td><td>显示和gc相关的堆信息；</td></tr><tr><td>-gccapacity</td><td>显示各个代的容量以及使用情况；</td></tr><tr><td>-gcmetacapacity</td><td>显示metaspace的大小</td></tr><tr><td>-gcnew</td><td>显示新生代信息；</td></tr><tr><td>-gcnewcapacity</td><td>显示新生代大小和使用情况；</td></tr><tr><td>-gcold</td><td>显示老年代和永久代的信息；</td></tr><tr><td>-gcoldcapacity</td><td>显示老年代的大小；</td></tr><tr><td>-gcutil</td><td>显示垃圾收集信息；</td></tr><tr><td>-gccause</td><td>显示垃圾回收的相关信息（通-gcutil）,同时显示最后一次或当前正在发生的垃圾回收的诱因；</td></tr><tr><td>-printcompilation</td><td>输出JIT编译的方法信息；</td></tr></tbody></table></li></ul><ul><li><p>类加载 -class</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -class &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>Loaded</td><td>已经装载的类的数量</td></tr><tr><td>Bytes</td><td>装载类所占用的字节数</td></tr><tr><td>Unloaded</td><td>已经卸载类的数量</td></tr><tr><td>Bytes</td><td>卸载类的字节数</td></tr><tr><td>Time</td><td>装载和卸载类所花费的时间</td></tr><tr><td>*  -compiler 显示VM实时编译(JIT)的数量信息</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -compiler &lt;pid&gt;</span><br></pre></td></tr></table></figure></td><td></td></tr></tbody></table><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>Compiled</td><td>编译任务执行数量</td></tr><tr><td>Failed</td><td>编译任务执行失败数量</td></tr><tr><td>Invalid</td><td>编译任务执行失效数量</td></tr><tr><td>Time</td><td>编译任务消耗时间</td></tr><tr><td>FailedType</td><td>最后一个编译失败任务的类型</td></tr><tr><td>FailedMethod</td><td>最后一个编译失败任务所在的类及方法</td></tr><tr><td>* -gc 垃圾收集</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -gc,-gcutil,-gccause,-gcnew,-gcold</span><br><span class="line">jstat -gc &lt;pid&gt;</span><br></pre></td></tr></table></figure></td><td></td></tr></tbody></table><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 （字节）</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S0U</td><td>年轻代中第一个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>S1U</td><td>年轻代中第二个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>EU</td><td>年轻代中Eden（伊甸园）目前已使用空间 (字节)</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>OU</td><td>Old代目前已使用空间 (字节)</td></tr><tr><td>MC</td><td>metaspace(元空间)的容量 (字节)</td></tr><tr><td>MU</td><td>metaspace(元空间)目前已使用空间 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc所用时间(s)</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr><tr><td>CCSC</td><td>压缩类空间总量(字节)</td></tr><tr><td>CCSU</td><td>压缩类空间使用量(字节)</td></tr></tbody></table><ul><li><p>-gccapacity VM内存中三代（young,old,perm）对象的使用和占用大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gccapacity &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>NGCMN</td><td>年轻代(young)中初始化(最小)的大小(字节)</td></tr><tr><td>NGCMX</td><td>年轻代(young)的最大容量 (字节)</td></tr><tr><td>NGC</td><td>年轻代(young)中当前的容量 (字节)</td></tr><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>OGCMN</td><td>old代中初始化(最小)的大小 (字节)</td></tr><tr><td>OGCMX</td><td>old代的最大容量(字节)</td></tr><tr><td>OGC</td><td>old代当前新生成的容量 (字节)</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>MCMN</td><td>metaspace(元空间)中初始化(最小)的大小 (字节)</td></tr><tr><td>MCMX</td><td>metaspace(元空间)的最大容量 (字节)</td></tr><tr><td>MC</td><td>metaspace(元空间)当前新生成的容量 (字节)</td></tr><tr><td>CCSMN</td><td>最小压缩类空间大小</td></tr><tr><td>CCSMX</td><td>最大压缩类空间大小</td></tr><tr><td>CCSC</td><td>当前压缩类空间大小</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr></tbody></table></li><li><p>-gcmetacapacity metaspace中对象的信息及其占用量。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcmetacapacity &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>MCMN</td><td>最小元数据容量</td></tr><tr><td>MCMX</td><td>最大元数据容量</td></tr><tr><td>MC</td><td>当前元数据空间大小</td></tr><tr><td>CCSMN</td><td>最小压缩类空间大小</td></tr><tr><td>CCSMX</td><td>最大压缩类空间大小</td></tr><tr><td>CCSC</td><td>当前压缩类空间大小</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table></li><li><p>-gcnew 年轻代对象的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcnew &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S0U</td><td>年轻代中第一个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>S1U</td><td>年轻代中第二个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>TT</td><td>持有次数限制</td></tr><tr><td>MTT</td><td>最大持有次数限制</td></tr><tr><td>DSS</td><td>期望的幸存区大小</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>EU</td><td>年轻代中Eden（伊甸园）目前已使用空间 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc所用时间(s)</td></tr></tbody></table></li><li><p>-gcnewcapacity 年轻代对象的信息及其占用量</p><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>NGCMN</td><td>年轻代(young)中初始化(最小)的大小(字节)</td></tr><tr><td>NGCMX</td><td>年轻代(young)的最大容量 (字节)</td></tr><tr><td>NGC</td><td>年轻代(young)中当前的容量 (字节)</td></tr><tr><td>S0CMX</td><td>年轻代中第一个survivor（幸存区）的最大容量 (字节)</td></tr><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S1CMX</td><td>年轻代中第二个survivor（幸存区）的最大容量 (字节)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>ECMX</td><td>年轻代中Eden（伊甸园）的最大容量 (字节)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr></tbody></table></li><li><p>-gcold old代对象的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcold &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>MC</td><td>metaspace(元空间)的容量 (字节)</td></tr><tr><td>MU</td><td>metaspace(元空间)目前已使用空间 (字节)</td></tr><tr><td>CCSC</td><td>压缩类空间大小</td></tr><tr><td>CCSU</td><td>压缩类空间使用大小</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>OU</td><td>Old代目前已使用空间 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table></li><li><p>-gcoldcapacity old代对象的信息及其占用量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcoldcapacity &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>OGCMN</td><td>old代中初始化(最小)的大小 (字节)</td></tr><tr><td>OGCMX</td><td>old代的最大容量(字节)</td></tr><tr><td>OGC</td><td>old代当前新生成的容量 (字节)</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table></li><li><p>-gcutil 统计gc信息</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcutil &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>S0</td><td>年轻代中第一个survivor（幸存区）已使用的占当前容量百分比</td></tr><tr><td>S1</td><td>年轻代中第二个survivor（幸存区）已使用的占当前容量百分比</td></tr><tr><td>E</td><td>年轻代中Eden（伊甸园）已使用的占当前容量百分比</td></tr><tr><td>O</td><td>old代已使用的占当前容量百分比</td></tr><tr><td>M</td><td>元数据的空间使用率</td></tr><tr><td>P</td><td>perm代已使用的占当前容量百分比</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc所用时间(s)</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table></li><li><p>-gccause 显示垃圾回收的相关信息（通-gcutil）,同时显示最后一次或当前正在发生的垃圾回收的诱因。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gccause &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>LGCC</td><td>最后一次GC原因</td></tr><tr><td>GCC</td><td>当前GC原因（No GC 为当前没有执行GC）</td></tr><tr><td>### 2.4 JVM的内存结构</td><td></td></tr></tbody></table></li></ul></li></ul><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F4.png" width="500" hegiht="313" align="center"><h3 id="2-5-jmap-MAT实战内存溢出"><a href="#2-5-jmap-MAT实战内存溢出" class="headerlink" title="2.5 jmap+MAT实战内存溢出"></a>2.5 jmap+MAT实战内存溢出</h3><ul><li><p>导出内存映像文件</p><ol><li><p>内存溢出自动导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:HeapDumpPath=./</span><br></pre></td></tr></table></figure></li><li><p>使用jmap命令手动导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=heap.hprof 1292</span><br></pre></td></tr></table></figure></li></ol></li><li><p>MAT分析内存溢出</p><ol><li><p>下载地址</p><p> <a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="noopener">http://www.eclipse.org/mat/downloads.php</a></p><p> 启动文件是<code>MemoryAnalyzer.exe</code></p><p> 打开hprof文件</p> <img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F5.png" width="500" hegiht="313" align="center"> <img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F6.png" width="500" hegiht="313" align="center"><hr> <img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F7.png" width="500" hegiht="313" align="center"></li></ol></li></ul><h3 id="2-5-jstack解决死循环和死锁"><a href="#2-5-jstack解决死循环和死锁" class="headerlink" title="2.5 jstack解决死循环和死锁"></a>2.5 jstack解决死循环和死锁</h3><ol><li><p>获取信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jstack 1292 &gt; 1292.txt</span><br><span class="line"># 找出cpu占用高的PID</span><br><span class="line">top -p 1292 -H</span><br><span class="line"># 获取PID的16进制</span><br><span class="line">printf &quot;%x&quot; 8247</span><br><span class="line"># 在1292.txt文件中搜索查到的进制:2037</span><br><span class="line"># 跳到nid=0x2037行</span><br></pre></td></tr></table></figure></li><li><p>线程状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 1292.txt</span><br><span class="line">java.lang.Thread.State: WAITING (parking)</span><br><span class="line"># NEW           新建</span><br><span class="line"># RUNNABLE      运行中</span><br><span class="line"># WAITING       等待</span><br><span class="line"># BLOCKED       阻塞</span><br><span class="line"># TERMINATED    结束</span><br></pre></td></tr></table></figure></li><li><p>死锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 拉到文件末尾</span><br><span class="line"># 有deadlock就是程序定位到死锁了</span><br></pre></td></tr></table></figure></li></ol><h1 id="三-java进程监控"><a href="#三-java进程监控" class="headerlink" title="三. java进程监控"></a>三. java进程监控</h1><h2 id="1-基于JVisualVM的可视化监控"><a href="#1-基于JVisualVM的可视化监控" class="headerlink" title="1. 基于JVisualVM的可视化监控"></a>1. 基于JVisualVM的可视化监控</h2><h3 id="1-本地监控"><a href="#1-本地监控" class="headerlink" title="1. 本地监控"></a>1. 本地监控</h3><pre><code>1. JVisualVM程序在jdk的bin目录下jvisualvm.exe2. 设置插件可安装</code></pre><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F8.png" width="500" hegiht="313" align="center"><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F9.png" width="500" hegiht="313" align="center"><h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2. 安装插件"></a>2. 安装插件</h3><ul><li><p>在下面地址中找出对应版本的<code>Java VisualVM</code>地址</p><p><a href="https://visualvm.github.io/pluginscenters.html" target="_blank" rel="noopener">https://visualvm.github.io/pluginscenters.html</a></p></li></ul><pre><code>* 安装Visual GC和BTrace插件</code></pre><h3 id="3-远程监控"><a href="#3-远程监控" class="headerlink" title="3. 远程监控"></a>3. 远程监控</h3><ul><li><p>ip:192.168.43.115,jmx端口:40124</p></li><li><p>配置hostname</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询</span></span><br><span class="line">hostname -i</span><br><span class="line"><span class="comment"># 加入hostname -i 的ip</span></span><br><span class="line"><span class="comment"># 与127.0.0.1 的一致</span></span><br><span class="line">vi /etc/hosts</span><br><span class="line"></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.43.115   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=40124/tcp --permanent</span><br><span class="line">systemctl restart firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>配置授权的账号密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝java的jmxremote.access和jmxremote.password到程序目录下</span></span><br><span class="line">cp JAVA_HOME/lib/management/jmxremote.access /home/project/jmxremote.access</span><br><span class="line">cp JAVA_HOME/lib/management/jmxremote.password /home/project/jmxremote.password</span><br><span class="line"><span class="comment"># 在/home/project/jmxremote.access加入账号和权限</span></span><br><span class="line">username readwrite</span><br><span class="line"><span class="comment"># 在/home/project/jmxremote.password加入密码</span></span><br><span class="line">username password</span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line">chmod 400 jmxremote.access</span><br><span class="line">chmod 400 jmxremote.password</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>远程jar监控</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=40124 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.access.file=./jmxremote.access -Dcom.sun.management.jmxremote.password.file=./jmxremote.password -Djava.net.preferIPv4Stack=true -Djava.rmi.server.hostname=192.168.43.115 -Dcom.sun.management.jmxremote.rmi.port=40124 -jar foot.jar</span><br></pre></td></tr></table></figure><table><thead><tr><th>配置</th><th>类型</th><th align="center">说明</th></tr></thead><tbody><tr><td>-Dcom.sun.management.jmxremote</td><td>布尔</td><td align="center">远程JMX访问</td></tr><tr><td>-Dcom.sun.management.jmxremote.port</td><td>数值</td><td align="center">远程监控端口</td></tr><tr><td>-Dcom.sun.management.jmxremote.ssl</td><td>布尔</td><td align="center">SSL加密，默认开启</td></tr><tr><td>-Dcom.sun.management.jmxremote.authenticate</td><td>布尔</td><td align="center">用户认证,默认开启</td></tr><tr><td>-Dcom.sun.management.jmxremote.access.file</td><td>字符</td><td align="center">对访问用户的权限授权的文件的路径，默认路径<code>JAVA_HOME/lib/management/jmxremote.access</code></td></tr><tr><td>-Dcom.sun.management.jmxremote. password.file</td><td>字符</td><td align="center">设置访问用户的用户名和密码，默认路径<code>JAVA_HOME/lib/management/jmxremote.password</code></td></tr><tr><td>-Djava.net.preferIPv4Stack</td><td>布尔</td><td align="center">ipv4方式访问,默认关闭</td></tr><tr><td>-Djava.rmi.server.hostname</td><td>string</td><td align="center">服务器ip或者域名</td></tr><tr><td>-Dcom.sun.management.jmxremote.rmi.port</td><td>数值</td><td align="center">rmi端口</td></tr></tbody></table></li><li><p>JVisualVM添加远程监控</p><p><img src="http://qiniu.caihc.site/blog/jvm1.PNG" alt="image"></p><p><img src="http://qiniu.caihc.site/blog/jvm2.PNG" alt="image"></p><p><img src="http://qiniu.caihc.site/blog/jvm3.PNG" alt></p></li></ul><h1 id="四-Nginx"><a href="#四-Nginx" class="headerlink" title="四. Nginx"></a>四. Nginx</h1><h2 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1. 基本命令"></a>1. 基本命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 使用default.conf配置文件，将它放入`/etc/nginx/conf.d` 中</span><br><span class="line"></span><br><span class="line"># 启动命令</span><br><span class="line">nginx -c /etc/nginx/nginx.conf</span><br><span class="line">重启命令</span><br><span class="line">nginx -s reload</span><br><span class="line"># 查看编译信息</span><br><span class="line">nginx -V</span><br><span class="line"># 注意:配置反向代理要关闭selinux,setenforce 0</span><br></pre></td></tr></table></figure><h2 id="2-nginx优化"><a href="#2-nginx优化" class="headerlink" title="2. nginx优化"></a>2. nginx优化</h2><h3 id="1-增加工作线程数和并发数"><a href="#1-增加工作线程数和并发数" class="headerlink" title="1. 增加工作线程数和并发数"></a>1. 增加工作线程数和并发数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># nginx.conf</span><br><span class="line">worker_processes 4; #cpu核心数</span><br><span class="line">events&#123;</span><br><span class="line">   worker_connections 10240; #每个进程打开的最大连接数,包含了nginx与客户端和nignx与upstream之间的连接 </span><br><span class="line">   multi_accept on; #可以一次建立多个连接</span><br><span class="line">   use epoll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-配置Server的长连接"><a href="#2-配置Server的长连接" class="headerlink" title="2. 配置Server的长连接"></a>2. 配置Server的长连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># default.conf</span><br><span class="line">keepalive 300; #设置长连接数的数量</span><br></pre></td></tr></table></figure><h3 id="3-配置数据压缩"><a href="#3-配置数据压缩" class="headerlink" title="3. 配置数据压缩"></a>3. 配置数据压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># nginx.conf</span><br><span class="line">gzip on;</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line">gzip_http_version 1.0;</span><br><span class="line">gzip_disable &quot;MSIE [1-6].(?!.*SV1)&quot;;</span><br><span class="line">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;</span><br><span class="line">gzip_vary on</span><br></pre></td></tr></table></figure><h3 id="4-操作系统优化"><a href="#4-操作系统优化" class="headerlink" title="4. 操作系统优化"></a>4. 操作系统优化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># /etc/sysctl.conf</span><br><span class="line">sysctl -w net.ipv4.tcp_syncookies = 1 # 防止一个套接字在有过多试图连接到达时引起过载</span><br><span class="line">sysctl -w net.core.somaxconn = 1024 #默认128,连接队列</span><br><span class="line">sysctl -w net.ipv4.tcp_fin_timeout = 10 #timewait的超时时间</span><br><span class="line">sysctl -w net.ipv4.tcp_tw_reuse = 1 #os直接使用timewait的连接</span><br><span class="line">sysctl -w net.ipv4.tcp_tw_recycle = 0 #回收禁用</span><br></pre></td></tr></table></figure><h2 id="3-nginx配置文件"><a href="#3-nginx配置文件" class="headerlink" title="3. nginx配置文件"></a>3. nginx配置文件</h2><ul><li><p>nginx.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">user  root;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">client_max_body_size 5m; </span><br><span class="line"></span><br><span class="line">underscores_in_headers on; #自定义 Head 必须定义 </span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_http_version 1.0;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].(?!.*SV1)&quot;;</span><br><span class="line">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;</span><br><span class="line">gzip_vary on</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>default.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">upstream teamfortWeChat &#123;  #代理配置</span><br><span class="line">server 127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream spring-boot-admin &#123; </span><br><span class="line">server 127.0.0.1:8012;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream spring-boot-admin-test &#123; #灰度ip发布</span><br><span class="line">server 127.0.0.1:8011;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#server &#123;#https配置</span><br><span class="line"> #   listen 443;</span><br><span class="line"> #   server_name 127.0.0.1;</span><br><span class="line"> #   ssl on;</span><br><span class="line"> #   root html;</span><br><span class="line"> #   index index.html index.htm;</span><br><span class="line"> #   ssl_certificate   cert/214245831800280.pem;</span><br><span class="line"> #   ssl_certificate_key  cert/214245831800280.key;</span><br><span class="line"> #   ssl_session_timeout 5m;</span><br><span class="line"> #   ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"> #   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"> #   ssl_prefer_server_ciphers on;</span><br><span class="line">#</span><br><span class="line">#location / &#123;</span><br><span class="line"># root   html;</span><br><span class="line">#         index  index.html index.htm;</span><br><span class="line">#    &#125;</span><br><span class="line">#location /teamfortWeChat/ &#123;</span><br><span class="line">#proxy_pass   http://teamfortWeChat;</span><br><span class="line">#proxy_redirect off;</span><br><span class="line">#proxy_set_header Host $host;</span><br><span class="line">#proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">#proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">#proxy_connect_timeout 90;</span><br><span class="line">#proxy_send_timeout 90;</span><br><span class="line">#proxy_read_timeout 90;</span><br><span class="line">#&#125;</span><br><span class="line">#</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line">server &#123;#http配置</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  127.0.0.1;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location /spring-boot-admin/ &#123;</span><br><span class="line">if ($remote_addr ~* &quot;116.20.64.169&quot;) &#123;#ip不同进入服务不同一般用于灰度发布</span><br><span class="line">proxy_pass http://spring-boot-admin;</span><br><span class="line">&#125;</span><br><span class="line">proxy_pass http://spring-boot-admin-test;</span><br><span class="line">proxy_redirect off;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_connect_timeout 90;</span><br><span class="line">proxy_send_timeout 90;</span><br><span class="line">proxy_read_timeout 90;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">   root   html;</span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #加载其他配置文件</span><br><span class="line">include /etc/nginx/conf.d/server80/*.conf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#设置例外静态资源，由nginx来处理静态资源#</span><br><span class="line">    location ~ \.(html|js|css|png|gif|jpg|jpeg|json|exml|fnt|ttf|TTF|woff|ico)$ &#123;  </span><br><span class="line">if ($request_uri ~* /spring-boot-admin/(.*)) &#123;#不需要nginx处理静态资源的项目</span><br><span class="line">proxy_pass http://spring-boot-admin;</span><br><span class="line">&#125;</span><br><span class="line">       root /usr/share/nginx/html; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">location /MP_verify_3YLUBmJdjqIG7yUh.txt &#123;  #微信公众号验证文件配置/usr/share/nginx/html</span><br><span class="line">        root /usr/share/nginx/html; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">location /.well-known/pki-validation/fileauth.txt &#123;  </span><br><span class="line">        root /usr/share/nginx/html; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #location / &#123;</span><br><span class="line">    #    root   /usr/share/nginx/html;</span><br><span class="line">    #    index  index.html index.htm;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="五-JVM的GC调优"><a href="#五-JVM的GC调优" class="headerlink" title="五. JVM的GC调优"></a>五. JVM的GC调优</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动时加入以下命令用于记录内存溢出时的记录</span></span><br><span class="line">-XX:+DisableExplicitGC  <span class="comment"># 使用nio或者Netty的框架不能使用</span></span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:HeapDumpPath=./logs/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下的是打印日常gc日志</span></span><br><span class="line">-XX:+PrintGCDetails <span class="comment"># 打印gc详情</span></span><br><span class="line">-XX:+PrintGCDateStamps <span class="comment"># 打印gc时间戳</span></span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line">-Xloggc:gcc.log <span class="comment"># 将日志输出到文件</span></span><br></pre></td></tr></table></figure><h2 id="5-1-GC日志"><a href="#5-1-GC日志" class="headerlink" title="5.1 GC日志"></a>5.1 GC日志</h2><ol><li><p>内容详情分析</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0.756: [Full GC (System) 0.756: [CMS: 0K-&gt;1696K(204800K), 0.0347096 secs] 11488K-&gt;1696K(252608K), [CMS Perm : 10328K-&gt;10320K(131072K)], 0.0347949 secs] [Times: user=0.06 sys=0.00, real=0.05 secs]</span><br><span class="line"> </span><br><span class="line">1.728: [GC 1.728: [ParNew: 38272K-&gt;2323K(47808K), 0.0092276 secs] 39968K-&gt;4019K(252608K), 0.0093169 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]</span><br><span class="line"> </span><br><span class="line">2.642: [GC 2.643: [ParNew: 40595K-&gt;3685K(47808K), 0.0075343 secs] 42291K-&gt;5381K(252608K), 0.0075972 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]</span><br><span class="line"> </span><br><span class="line">4.349: [GC 4.349: [ParNew: 41957K-&gt;5024K(47808K), 0.0106558 secs] 43653K-&gt;6720K(252608K), 0.0107390 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]</span><br><span class="line"> </span><br><span class="line">5.617: [GC 5.617: [ParNew: 43296K-&gt;7006K(47808K), 0.0136826 secs] 44992K-&gt;8702K(252608K), 0.0137904 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]</span><br><span class="line"> </span><br><span class="line">7.429: [GC 7.429: [ParNew: 45278K-&gt;6723K(47808K), 0.0251993 secs] 46974K-&gt;10551K(252608K), 0.0252421 secs]</span><br></pre></td></tr></table></figure><p> 取倒数第二条记录分析一下各个字段都代表了什么含义</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.617（时间戳）: [GC（Young GC） 5.617（时间戳）: [ParNew（GC的区域）: 43296K（垃圾回收前的大小）-&gt;7006K（垃圾回收以后的大小）(47808K)（该区域总大小）, 0.0136826 secs（回收时间）] 44992K（堆区垃圾被回收前的大小）-&gt;8702K（堆区垃圾被回收后的大小）(252608K)（堆区总大小）, 0.0137904 secs（回收时间）] [Times: user=0.03（GC用户耗时） sys=0.00（GC系统耗时）, real=0.02 secs（GC实际耗时）]</span><br></pre></td></tr></table></figure></li></ol><pre><code>从最后一条GC记录中我们可以看到 Young GC回收了 45278-6723=38555K的内存Heap区通过这次回收总共减少了 46974-10551=36423K的内存。38555-36423=2132K说明通过该次Young GC有2132K的内存被移动到了Old Gen我们来验证一下在最后一次Young GC的回收以前 Old Gen的大小为8702-7006=1696回收以后Old Gen的内存使用为10551-6723=3828Old Gen在该次Young GC以后内存增加了3828-1696=2132K 与预计的相符</code></pre><ol start="2"><li>内容总结分析<br> <img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java/GC%E6%97%A5%E5%BF%97.png" alt="image"><ul><li>[GC [DefNew … …]</li><li>GC日志开头的信息通过设置-verbose:gc参数后才能输出。</li><li>“[GC”和”[Full GC”说明这次垃圾收集的停顿类型，如果这次GC发生了Stop-The-World，则为”[Full GC”，否则为”[GC”</li><li>“[DefNew “表示GC发生的区域为Serial收集器的新生代中，DefNew是”Default New Generation”的缩写。Serial收集器的老年代和永久代分别表示为”Tenured”、”Perm”</li><li>** eden space 8192K, 52% used**</li><li>新生代的Eden区总共大小为8MB，使用掉的4MB是用来存放allocation4对象</li><li>tenured generation total 10240K, used 6144K</li><li>老年代大小为10MB，使用掉的6MB是用来存放allocation1、allocation2和allocation3这3个对象</li></ul></li></ol><h1 id="6-工具"><a href="#6-工具" class="headerlink" title="6 工具"></a>6 工具</h1><ul><li><p>在线GC日志分析</p><p> <a href="http://gceasy.io/" target="_blank" rel="noopener">http://gceasy.io/</a></p></li><li><p>JVM在线调优</p><p><a href="http://xxfox.perfma.com/" target="_blank" rel="noopener">http://xxfox.perfma.com/</a> </p></li><li><p>visualGC 日志工具</p></li></ul><h1 id="7-JVM知识的优秀文章"><a href="#7-JVM知识的优秀文章" class="headerlink" title="7 JVM知识的优秀文章"></a>7 JVM知识的优秀文章</h1><p>【JVM调优总结-有着详细的jvm知识介绍】: <a href="https://www.jianshu.com/p/51d82de75d3d" target="_blank" rel="noopener">https://www.jianshu.com/p/51d82de75d3d</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker命令选项</title>
      <link href="/posts/3fe19f6b/"/>
      <url>/posts/3fe19f6b/</url>
      
        <content type="html"><![CDATA[<h1 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>–log-opt max-size=[0-9+][k|m|g]</td><td>文件的大小<br><code>--log-opt max-size=10m</code></td></tr><tr><td>–log-opt max-file=[0-9+]</td><td>文件数量<br><code>--log-opt max-file=3</code></td></tr><tr><td>–add-host</td><td>指定往/etc/hosts添加的host<br><code>--add-host mysql:192.168.10.32</code></td></tr><tr><td>–restart=[no|on-failure|always|unless-stopped|]</td><td><code>no</code>:默认策略，在容器退出时不重启容器<br><code>on-failure</code>:在容器非正常退出时（退出状态非0），才会重启容器<br> <code>on-failure:3</code>:在容器非正常退出时重启容器，最多重启3次<br><code>always</code>:在容器退出时总是重启容器<br><code>unless-stopped</code>:在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</td></tr></tbody></table><h1 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h1><h2 id="1-Image"><a href="#1-Image" class="headerlink" title="1. Image"></a>1. Image</h2><ul><li><p>删除全部镜像记录</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure></li><li><p>删除退出的镜像记录</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -f &quot;status=exited&quot; -q)</span><br></pre></td></tr></table></figure></li><li><p>批量删除指定的镜像</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images | grep dgemc.asuscomm.com:9293/teamfort_vote/teamfort_vote | awk &apos;&#123;print $3&#125;&apos;)</span><br></pre></td></tr></table></figure></li><li><p>镜像内容拷贝<br>  先启动</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx  nginx</span><br></pre></td></tr></table></figure><p>  然后拷贝配置文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp nginx:/etc/nginx/ /etc/nginx/</span><br></pre></td></tr></table></figure><p>  然后删除</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -fv nginx</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-volume"><a href="#2-volume" class="headerlink" title="2. volume"></a>2. volume</h2><ul><li>删除所有（本地）没有被容器使用的volume  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-network"><a href="#3-network" class="headerlink" title="3. network"></a>3. network</h2><ul><li>删除所有孤立的网络。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network prune</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装教程</title>
      <link href="/posts/82496b1a/"/>
      <url>/posts/82496b1a/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h3 id="Docker文档地址"><a href="#Docker文档地址" class="headerlink" title="Docker文档地址"></a>Docker文档地址</h3><p><a href="https://cloud.tencent.com/developer/doc/1060" target="_blank" rel="noopener">https://cloud.tencent.com/developer/doc/1060</a></p><p><a href="https://docker_practice.gitee.io/" target="_blank" rel="noopener">https://docker_practice.gitee.io/</a></p><h3 id="一-安装教程来源"><a href="#一-安装教程来源" class="headerlink" title="一. 安装教程来源"></a>一. 安装教程来源</h3><p><a href="http://get.daocloud.io" target="_blank" rel="noopener">http://get.daocloud.io</a></p><h3 id="二-Linux安装Docker"><a href="#二-Linux安装Docker" class="headerlink" title="二. Linux安装Docker"></a>二. Linux安装Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><h3 id="三-Linux安装Docker-Compose"><a href="#三-Linux安装Docker-Compose" class="headerlink" title="三. Linux安装Docker Compose"></a>三. Linux安装Docker Compose</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="四-安装出现的问题解决"><a href="#四-安装出现的问题解决" class="headerlink" title="四. 安装出现的问题解决"></a>四. 安装出现的问题解决</h3><h4 id="1-Delta-RPMs-disabled-because-usr-bin-applydeltarpm-not-installed"><a href="#1-Delta-RPMs-disabled-because-usr-bin-applydeltarpm-not-installed" class="headerlink" title="1. Delta RPMs disabled because /usr/bin/applydeltarpm not installed"></a>1. <code>Delta RPMs disabled because /usr/bin/applydeltarpm not installed</code></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum provides <span class="string">'*/applydeltarpm'</span>  </span><br><span class="line">yum install deltarpm</span><br></pre></td></tr></table></figure><h3 id="五-Docker-开机自启动"><a href="#五-Docker-开机自启动" class="headerlink" title="五. Docker 开机自启动"></a>五. Docker 开机自启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置问题</title>
      <link href="/posts/c282aa2f/"/>
      <url>/posts/c282aa2f/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Docker容器和宿主机时间同步问题"><a href="#1-Docker容器和宿主机时间同步问题" class="headerlink" title="1. Docker容器和宿主机时间同步问题"></a>1. Docker容器和宿主机时间同步问题</h2><ul><li><p>原因:宿主机时区和Docker容器的不一致，导致两者相差8小时</p></li><li><p>解决方法一:<br>  启动容器的时候指定启动参数，自动挂载localtime文件到容器内</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name &lt;name&gt; -v /etc/localtime:/etc/localtime:ro  ....</span><br></pre></td></tr></table></figure></li><li><p>解决方法二:<br>  把时区设置加入到Dockerfile中</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CentOS</span></span><br><span class="line">RUN echo "Asia/shanghai" &gt; /etc/timezone;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-设置自定义仓库"><a href="#2-设置自定义仓库" class="headerlink" title="2. 设置自定义仓库"></a>2. 设置自定义仓库</h2><ul><li><p>修改 /etc/docker/daemon.json 文件</p>   <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"insecure-registries": [</span><br><span class="line">   <span class="string">"dgemc.asuscomm.com:9293"</span></span><br><span class="line"> ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-设置Docker-Hub源"><a href="#3-设置Docker-Hub源" class="headerlink" title="3. 设置Docker Hub源"></a>3. 设置Docker Hub源</h2><ul><li>修改 /etc/docker/daemon.json 文件  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"registry-mirrors": [</span><br><span class="line">    <span class="string">"http://d2f5eeb9.m.daocloud.io"</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-volume数据共享-–volumes-from"><a href="#4-volume数据共享-–volumes-from" class="headerlink" title="4. volume数据共享  –volumes-from"></a>4. volume数据共享  –volumes-from</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged -p 8692:8121 --name shunde_accounting-wechat -v shunde_accounting:/home shunde_accounting-wechat:1.0</span><br><span class="line"></span><br><span class="line">docker run -d --privileged -p 8692:8121 --name shunde_accounting-wechat2 --volumes-from shunde_accounting-wechat shunde_accounting-wechat:1.0</span><br></pre></td></tr></table></figure><h2 id="5-docker容器固定ip"><a href="#5-docker容器固定ip" class="headerlink" title="5. docker容器固定ip"></a>5. docker容器固定ip</h2><ol><li><p>network plugin创建一个新的bridge</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network  create  -d bridge --subnet=192.168.210.0/24 --gateway=192.168.210.1 -o parent=eth0 br1</span><br></pre></td></tr></table></figure></li><li><p>创建容器</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --net=br1 --ip=192.168.210.3 --name=nginx2 nginx:1.10-alpine</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-全局设置日志大小"><a href="#6-全局设置日志大小" class="headerlink" title="6. 全局设置日志大小"></a>6. 全局设置日志大小</h2><ul><li>在<code>/etc/docker/daemon.json</code>添加:  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"log-opts": &#123;"max-size":"100m", "max-file":"3"&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Harbor私有仓库搭建</title>
      <link href="/posts/27bcef6f/"/>
      <url>/posts/27bcef6f/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Harbor-服务搭建"><a href="#1-Harbor-服务搭建" class="headerlink" title="1. Harbor 服务搭建"></a>1. Harbor 服务搭建</h2><h3 id="1-下载Harbor安装文件"><a href="#1-下载Harbor安装文件" class="headerlink" title="1. 下载Harbor安装文件"></a>1. 下载Harbor安装文件</h3><ul><li>从 github harbor 官网 release 页面下载指定版本的安装包。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、在线安装包</span></span><br><span class="line">    wget https://github.com/vmware/harbor/releases/download/v1.7.4/harbor-online-installer-v1.7.4.tgz</span><br><span class="line">    tar xvf harbor-online-installer-v1.7.4.tgz</span><br><span class="line"><span class="comment"># 2、离线安装包</span></span><br><span class="line">    wget https://github.com/vmware/harbor/releases/download/v1.1.2/harbor-offline-installer-v1.7.4.tgz</span><br><span class="line">    tar xvf harbor-offline-installer-v1.7.4.tgz</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-配置harbor-cfg"><a href="#2-配置harbor-cfg" class="headerlink" title="2. 配置harbor.cfg"></a>2. 配置harbor.cfg</h3><ol><li>配置说明<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hostname设置访问地址，可以使用ip、域名，不可以设置为127.0.0.1或localhost</span></span><br><span class="line"><span class="attr">hostname</span> = frp.teamfort.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问协议，默认是http，也可以设置https，如果设置https，则nginx ssl需要设置on</span></span><br><span class="line"><span class="attr">ui_url_protocol</span> = http</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql数据库root用户默认密码root123，实际使用时修改下</span></span><br><span class="line"><span class="attr">db_password</span> = root123</span><br><span class="line"></span><br><span class="line"><span class="attr">max_job_workers</span> = <span class="number">3</span> </span><br><span class="line"><span class="attr">customize_crt</span> = <span class="literal">on</span></span><br><span class="line"><span class="attr">ssl_cert</span> = /data/cert/server.crt</span><br><span class="line"><span class="attr">ssl_cert_key</span> = /data/cert/server.key</span><br><span class="line"><span class="attr">secretkey_path</span> = /data</span><br><span class="line"><span class="attr">admiral_url</span> = NA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件设置，发送重置密码邮件时使用</span></span><br><span class="line"><span class="attr">email_identity</span> = </span><br><span class="line"><span class="attr">email_server</span> = smtp.mydomain.com</span><br><span class="line"><span class="attr">email_server_port</span> = <span class="number">25</span></span><br><span class="line"><span class="attr">email_username</span> = sample_admin@mydomain.com</span><br><span class="line"><span class="attr">email_password</span> = abc</span><br><span class="line"><span class="attr">email_from</span> = admin &lt;sample_admin@mydomain.com&gt;</span><br><span class="line"><span class="attr">email_ssl</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Harbor后，管理员UI登录的密码，默认是Harbor12345</span></span><br><span class="line"><span class="attr">harbor_admin_password</span> = Harbor12345</span><br><span class="line"></span><br><span class="line"><span class="comment"># 认证方式，这里支持多种认证方式，如LADP、本次存储、数据库认证。默认是db_auth，mysql数据库认证</span></span><br><span class="line"><span class="attr">auth_mode</span> = db_auth</span><br><span class="line"></span><br><span class="line"><span class="comment"># LDAP认证时配置项</span></span><br><span class="line"><span class="comment">#ldap_url = ldaps://ldap.mydomain.com</span></span><br><span class="line"><span class="comment">#ldap_searchdn = uid=searchuser,ou=people,dc=mydomain,dc=com</span></span><br><span class="line"><span class="comment">#ldap_search_pwd = password</span></span><br><span class="line"><span class="comment">#ldap_basedn = ou=people,dc=mydomain,dc=com</span></span><br><span class="line"><span class="comment">#ldap_filter = (objectClass=person)</span></span><br><span class="line"><span class="comment">#ldap_uid = uid </span></span><br><span class="line"><span class="comment">#ldap_scope = 3 </span></span><br><span class="line"><span class="comment">#ldap_timeout = 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启自注册</span></span><br><span class="line"><span class="attr">self_registration</span> = <span class="literal">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Token有效时间，默认30分钟</span></span><br><span class="line"><span class="attr">token_expiration</span> = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户创建项目权限控制，默认是everyone（所有人），也可以设置为adminonly（只能管理员）</span></span><br><span class="line"><span class="attr">project_creation_restriction</span> = everyone</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-启动安装"><a href="#3-启动安装" class="headerlink" title="3. 启动安装"></a>3. 启动安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure><h3 id="4-Harbor-UI访问地址"><a href="#4-Harbor-UI访问地址" class="headerlink" title="4. Harbor-UI访问地址"></a>4. Harbor-UI访问地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://frp.teamfort.cn:80</span><br></pre></td></tr></table></figure><h2 id="2-Harbor使用过程中的坑"><a href="#2-Harbor使用过程中的坑" class="headerlink" title="2. Harbor使用过程中的坑"></a>2. Harbor使用过程中的坑</h2><ul><li><p>配置文件修改<br><br>第一次安装Harbor后，mysql的数据会存储在/data/database文件夹下。如果你想修改mysql root密码的话（不管你有没有重装），都要先把/data/database删掉，否则UI容器会一直报“Access denied”的错误，即便是重下镜像也无法解决。（这个问题花费了我大半天的时间，最后终于在官方issues里找到了解决方案T_T）<br>当然在自己的测试环境里边可以随便玩，但如果想把Harbor部署到生产环境中，强烈建议预先配置好各类环境参数，避免改动。</p></li><li><p>Nginx端口修改<br><br>Harbor的Nginx端口映射到宿主机的80端口上了，一般情况下我们不希望80端口被占用，所以需要修改docker-compose.yml文件：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">nginx:1.9</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span><span class="string">./common/config/nginx:/etc/nginx</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9999</span><span class="string">:80</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">registry</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ui</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">log</span></span><br></pre></td></tr></table></figure><p>  然后再修改common/templates/registry/config.yml文件：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth:</span></span><br><span class="line"><span class="attr">  token:</span></span><br><span class="line"><span class="attr">    issuer:</span><span class="string">registry-token-issuer</span></span><br><span class="line"><span class="attr">    realm:</span> <span class="string">$ui_url:9999/service/token</span></span><br><span class="line"><span class="attr">    rootcertbundle:</span><span class="string">/etc/registry/root.crt</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">token-service</span></span><br></pre></td></tr></table></figure><p>  修改完成后执行<code>sudo ./prepare</code>重新生成配置文件</p></li><li><p>Registry端口修改（非必需）<br><br>按照惯例，开放5000端口给registry使用，则修改docker-compose.yml文件，为registry节点添加posts属性，步骤与修改Nginx配置一样。</p></li><li><p>设置信赖列表<br><br>默认情况下，docker对registry的操作是基于https协议的，而Harbor默认是以http协议访问的，如果这时候执行docker login的操作，会得到这样的错误信息：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: Get https://xx.xxx.xx.xx/v1/users/: dial tcp xx.xxx.xx.xx:443:getsockopt: connection refused</span><br></pre></td></tr></table></figure><p>  这时候需要修改docker的启动文件<code>docker.service</code>，如下所示：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Modified,origin: ExecStart=/usr/bin/dockerd -H fd://</span></span><br><span class="line">ExecStart=/usr/bin/docker daemon -H fd:// --insecure-registry xx.xxx.xx.xx:5000</span><br></pre></td></tr></table></figure><p>  然后执行命令：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>登录私人仓库否则会出现 </p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">denied: requested access to the resource is denied</span><br></pre></td></tr></table></figure><p>  解决方法进行登录操作</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//登录</span><br><span class="line">docker login xx.xxx.xx.xx:5000</span><br><span class="line">//退出</span><br><span class="line">docker logout xx.xxx.xx.xx:5000</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Harbor使用"><a href="#3-Harbor使用" class="headerlink" title="3. Harbor使用"></a>3. Harbor使用</h2><ol><li><p>上传项目到Harbor<br> 以docker的官方镜像hello-world为例，先下载好镜像，然后给镜像打tag：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag hello-world xx.xx.xx.xx:5000/test/hello-world</span><br></pre></td></tr></table></figure><p> 其中“test”为项目名，如果预先没有创建test项目的话，push的时候会提示：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">denied: requested access to the resource is denied</span><br></pre></td></tr></table></figure><p> 那么现在Harbor UI里新建一个test项目，然后执行：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push xx.xx.xx.xx:5000/test/hello-world</span><br></pre></td></tr></table></figure></li><li><p>拉去镜像</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull xx.xx.xx.xx:5000/test/hello-world</span><br></pre></td></tr></table></figure><p> 会报连接错误</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><p> 解决的方法也很简单，在/etc/docker/daemon.json（如果没有就新建）中添加以下代码：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"insecure-registries"</span>:[<span class="string">"xx.xx.xx.xx:5000"</span>] &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker远程访问加入Tsl安全验证</title>
      <link href="/posts/63e1b8c2/"/>
      <url>/posts/63e1b8c2/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker远程访问加入Tsl安全验证"><a href="#Docker远程访问加入Tsl安全验证" class="headerlink" title="Docker远程访问加入Tsl安全验证"></a>Docker远程访问加入Tsl安全验证</h1><h3 id="Tsl脚本"><a href="#Tsl脚本" class="headerlink" title="Tsl脚本"></a>Tsl脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">reated by L.STONE &lt;web.developer.network@gmail.com&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动创建 Docker TLS 证书</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下是配置信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --[BEGIN]------------------------------</span></span><br><span class="line"></span><br><span class="line">CODE="docker"</span><br><span class="line">IP="服务器ip"</span><br><span class="line">PASSWORD="2707829"</span><br><span class="line">COUNTRY="CN"</span><br><span class="line">STATE="gd"</span><br><span class="line">CITY="fs"</span><br><span class="line">ORGANIZATION="teamfort"</span><br><span class="line">ORGANIZATIONAL_UNIT="Dev"</span><br><span class="line">COMMON_NAME="$IP"</span><br><span class="line">EMAIL="qq869672271@gmail.com"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --[END]--</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate CA key</span></span><br><span class="line">openssl genrsa -aes256 -passout "pass:$PASSWORD" -out "ca-key-$CODE.pem" 4096</span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate CA</span></span><br><span class="line">openssl req -new -x509 -days 365 -key "ca-key-$CODE.pem" -sha256 -out "ca-$CODE.pem" -passin "pass:$PASSWORD" -subj "/C=$COUNTRY/ST=$STATE/L=$CITY/O=$ORGANIZATION/OU=$ORGANIZATIONAL_UNIT/CN=$COMMON_NAME/emailAddress=$EMAIL"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate Server key</span></span><br><span class="line">openssl genrsa -out "server-key-$CODE.pem" 4096</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate Server Certs.</span></span><br><span class="line">openssl req -subj "/CN=$COMMON_NAME" -sha256 -new -key "server-key-$CODE.pem" -out server.csr</span><br><span class="line"></span><br><span class="line">echo "subjectAltName = IP:$IP,IP:127.0.0.1" &gt;&gt; extfile.cnf</span><br><span class="line">echo "extendedKeyUsage = serverAuth" &gt;&gt; extfile.cnf</span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 365 -sha256 -in server.csr -passin "pass:$PASSWORD" -CA "ca-$CODE.pem" -CAkey "ca-key-$CODE.pem" -CAcreateserial -out "server-cert-$CODE.pem" -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate Client Certs.</span></span><br><span class="line">rm -f extfile.cnf</span><br><span class="line"></span><br><span class="line">openssl genrsa -out "key-$CODE.pem" 4096</span><br><span class="line">openssl req -subj '/CN=client' -new -key "key-$CODE.pem" -out client.csr</span><br><span class="line">echo extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 365 -sha256 -in client.csr -passin "pass:$PASSWORD" -CA "ca-$CODE.pem" -CAkey "ca-key-$CODE.pem" -CAcreateserial -out "cert-$CODE.pem" -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line">rm -vf client.csr server.csr</span><br><span class="line"></span><br><span class="line">chmod -v 0400 "ca-key-$CODE.pem" "key-$CODE.pem" "server-key-$CODE.pem"</span><br><span class="line">chmod -v 0444 "ca-$CODE.pem" "server-cert-$CODE.pem" "cert-$CODE.pem"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打包客户端证书</span></span><br><span class="line">mkdir -p "tls-client-certs-$CODE"</span><br><span class="line">cp -f "ca-$CODE.pem" "cert-$CODE.pem" "key-$CODE.pem" "tls-client-certs-$CODE/"</span><br><span class="line">cd "tls-client-certs-$CODE"</span><br><span class="line">tar zcf "tls-client-certs-$CODE.tar.gz" *</span><br><span class="line">mv "tls-client-certs-$CODE.tar.gz" ../</span><br><span class="line">cd ..</span><br><span class="line">rm -rf "tls-client-certs-$CODE"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝服务端证书</span></span><br><span class="line">mkdir -p /etc/docker/certs.d</span><br><span class="line">cp "ca-$CODE.pem" "server-cert-$CODE.pem" "server-key-$CODE.pem" /etc/docker/certs.d/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/docker/daemon.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlsverify"</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlscacert"</span>: <span class="string">"/etc/docker/certs.d/ca.pem"</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlscert"</span>: <span class="string">"/etc/docker/certs.d/server-cert.pem"</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlskey"</span>: <span class="string">"/etc/docker/certs.d/server-key.pem"</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"hosts"</span>: [<span class="string">"tcp://0.0.0.0:2376"</span>, <span class="string">"unix:///var/run/docker.sock"</span>]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#125;</span></span><br><span class="line"></span><br><span class="line">echo " - 修改 /etc/docker/daemon.json 文件"</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  "tlsverify": true,</span><br><span class="line">  "tlscacert": "/etc/docker/certs.d/ca-$CODE.pem",</span><br><span class="line">  "tlscert": "/etc/docker/certs.d/server-cert-$CODE.pem",</span><br><span class="line">  "tlskey": "/etc/docker/certs.d/server-key-$CODE.pem",</span><br><span class="line">  "hosts": ["tcp://0.0.0.0:2376", "unix:///var/run/docker.sock"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">echo ""</span><br><span class="line">echo "或者在vi /lib/systemd/system/docker.service 中的 ExecStart=/usr/bin/dockerd后加入"</span><br><span class="line">echo "--tlsverify --tlscacert=/etc/docker/certs.d/ca-$CODE.pem --tlscert=/etc/docker/certs.d/server-cert-$CODE.pem --tlskey=/etc/docker/certs.d/server-key-$CODE.pem -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock"</span><br><span class="line">echo ""</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝客户端证书文件</span></span><br><span class="line">mkdir -p ~/.docker</span><br><span class="line">cp -v &#123;ca,cert,key&#125;-$CODE.pem ~/.docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端远程连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker -H 192.168.1.130:2376 --tlsverify --tlscacert ~/.docker/ca.pem --tlscert ~/.docker/cert.pem --tlskey ~/.docker/key.pem ps -a</span></span><br><span class="line">echo "docker -H $IP:2376 --tlsverify --tlscacert ~/.docker/ca-$CODE.pem --tlscert ~/.docker/cert-$CODE.pem --tlskey ~/.docker/key-$CODE.pem ps -a"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端使用 cURL 连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> curl --cacert ~/.docker/ca.pem --cert ~/.docker/cert.pem --key ~/.docker/key.pem https://192.168.1.130:2376/containers/json</span></span><br><span class="line">echo "curl --cacert ~/.docker/ca-$CODE.pem --cert ~/.docker/cert-$CODE.pem --key ~/.docker/key-$CODE.pem https://$IP:2376/containers/json"</span><br><span class="line"></span><br><span class="line">echo -e "\e[1;32mAll be done.\e[0m"</span><br></pre></td></tr></table></figure><p>然后在</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br><span class="line"><span class="comment">#ExecStart=/usr/bin/dockerd后加入</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/dockerd --tlsverify --tlscacert=/etc/docker/certs.d/ca-<span class="variable">$&#123;CODE&#125;</span>.pem --tlscert=/etc/docker/certs.d/server-cert-<span class="variable">$&#123;CODE&#125;</span>.pem --tlskey=/etc/docker/certs.d/server-key-<span class="variable">$&#123;CODE&#125;</span>.pem -H tcp://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2376</span> -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure><p><code>chmod +x tls.sh</code></p><p>客户端的密钥在 <code>~/.docker</code> 下</p><p>重启docker服务</p><p><code>systemctl daemon-reload</code> </p><p><code>systemctl restart docker</code></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
