<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker安装教程</title>
      <link href="/posts/82496b1a/"/>
      <url>/posts/82496b1a/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h3 id="一-教程来源"><a href="#一-教程来源" class="headerlink" title="一. 教程来源"></a>一. 教程来源</h3><p><a href="http://get.daocloud.io" target="_blank" rel="noopener">http://get.daocloud.io</a></p><h3 id="二-Linux安装Docker"><a href="#二-Linux安装Docker" class="headerlink" title="二. Linux安装Docker"></a>二. Linux安装Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><h3 id="三-Linux安装Docker-Compose"><a href="#三-Linux安装Docker-Compose" class="headerlink" title="三. Linux安装Docker Compose"></a>三. Linux安装Docker Compose</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="四-安装出现的问题解决"><a href="#四-安装出现的问题解决" class="headerlink" title="四. 安装出现的问题解决"></a>四. 安装出现的问题解决</h3><h4 id="1-Delta-RPMs-disabled-because-usr-bin-applydeltarpm-not-installed"><a href="#1-Delta-RPMs-disabled-because-usr-bin-applydeltarpm-not-installed" class="headerlink" title="1. Delta RPMs disabled because /usr/bin/applydeltarpm not installed"></a>1. <code>Delta RPMs disabled because /usr/bin/applydeltarpm not installed</code></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum provides <span class="string">'*/applydeltarpm'</span>  </span><br><span class="line">yum install deltarpm</span><br></pre></td></tr></table></figure><h3 id="五-Docker-开机自启动"><a href="#五-Docker-开机自启动" class="headerlink" title="五. Docker 开机自启动"></a>五. Docker 开机自启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置问题</title>
      <link href="/posts/c282aa2f/"/>
      <url>/posts/c282aa2f/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Docker容器和宿主机时间同步问题"><a href="#1-Docker容器和宿主机时间同步问题" class="headerlink" title="1. Docker容器和宿主机时间同步问题"></a>1. Docker容器和宿主机时间同步问题</h2><ul><li><p>原因:宿主机时区和Docker容器的不一致，导致两者相差8小时</p></li><li><p>解决方法一:<br>  启动容器的时候指定启动参数，自动挂载localtime文件到容器内</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name &lt;name&gt; -v /etc/localtime:/etc/localtime:ro  ....</span><br></pre></td></tr></table></figure></li><li><p>解决方法二:<br>  把时区设置加入到Dockerfile中</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CentOS</span></span><br><span class="line">RUN echo "Asia/shanghai" &gt; /etc/timezone;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-设置自定义仓库"><a href="#2-设置自定义仓库" class="headerlink" title="2. 设置自定义仓库"></a>2. 设置自定义仓库</h2><ul><li><p>修改 /etc/docker/daemon.json 文件</p>   <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"insecure-registries": [</span><br><span class="line">   <span class="string">"dgemc.asuscomm.com:9293"</span></span><br><span class="line"> ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-设置Docker-Hub源"><a href="#3-设置Docker-Hub源" class="headerlink" title="3. 设置Docker Hub源"></a>3. 设置Docker Hub源</h2><ul><li>修改 /etc/docker/daemon.json 文件  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"registry-mirrors": [</span><br><span class="line">    <span class="string">"http://d2f5eeb9.m.daocloud.io"</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-volume数据共享-–volumes-from"><a href="#4-volume数据共享-–volumes-from" class="headerlink" title="4. volume数据共享  –volumes-from"></a>4. volume数据共享  –volumes-from</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged -p 8692:8121 --name shunde_accounting-wechat -v shunde_accounting:/home shunde_accounting-wechat:1.0</span><br><span class="line"></span><br><span class="line">docker run -d --privileged -p 8692:8121 --name shunde_accounting-wechat2 --volumes-from shunde_accounting-wechat shunde_accounting-wechat:1.0</span><br></pre></td></tr></table></figure><h2 id="5-docker容器固定ip"><a href="#5-docker容器固定ip" class="headerlink" title="5. docker容器固定ip"></a>5. docker容器固定ip</h2><ol><li><p>network plugin创建一个新的bridge</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network  create  -d bridge --subnet=192.168.210.0/24 --gateway=192.168.210.1 -o parent=eth0 br1</span><br></pre></td></tr></table></figure></li><li><p>创建容器</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --net=br1 --ip=192.168.210.3 --name=nginx2 nginx:1.10-alpine</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-全局设置日志大小"><a href="#6-全局设置日志大小" class="headerlink" title="6. 全局设置日志大小"></a>6. 全局设置日志大小</h2><ul><li>在<code>/etc/docker/daemon.json</code>添加:  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"log-opts": &#123;"max-size":"100m", "max-file":"3"&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Harbor私有仓库搭建</title>
      <link href="/posts/27bcef6f/"/>
      <url>/posts/27bcef6f/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Harbor-服务搭建"><a href="#1-Harbor-服务搭建" class="headerlink" title="1. Harbor 服务搭建"></a>1. Harbor 服务搭建</h2><h3 id="1-下载Harbor安装文件"><a href="#1-下载Harbor安装文件" class="headerlink" title="1. 下载Harbor安装文件"></a>1. 下载Harbor安装文件</h3><ul><li>从 github harbor 官网 release 页面下载指定版本的安装包。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、在线安装包</span></span><br><span class="line">    wget https://github.com/vmware/harbor/releases/download/v1.7.4/harbor-online-installer-v1.7.4.tgz</span><br><span class="line">    tar xvf harbor-online-installer-v1.7.4.tgz</span><br><span class="line"><span class="comment"># 2、离线安装包</span></span><br><span class="line">    wget https://github.com/vmware/harbor/releases/download/v1.1.2/harbor-offline-installer-v1.7.4.tgz</span><br><span class="line">    tar xvf harbor-offline-installer-v1.7.4.tgz</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-配置harbor-cfg"><a href="#2-配置harbor-cfg" class="headerlink" title="2. 配置harbor.cfg"></a>2. 配置harbor.cfg</h3><ol><li>配置说明<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hostname设置访问地址，可以使用ip、域名，不可以设置为127.0.0.1或localhost</span></span><br><span class="line"><span class="attr">hostname</span> = frp.teamfort.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问协议，默认是http，也可以设置https，如果设置https，则nginx ssl需要设置on</span></span><br><span class="line"><span class="attr">ui_url_protocol</span> = http</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql数据库root用户默认密码root123，实际使用时修改下</span></span><br><span class="line"><span class="attr">db_password</span> = root123</span><br><span class="line"></span><br><span class="line"><span class="attr">max_job_workers</span> = <span class="number">3</span> </span><br><span class="line"><span class="attr">customize_crt</span> = <span class="literal">on</span></span><br><span class="line"><span class="attr">ssl_cert</span> = /data/cert/server.crt</span><br><span class="line"><span class="attr">ssl_cert_key</span> = /data/cert/server.key</span><br><span class="line"><span class="attr">secretkey_path</span> = /data</span><br><span class="line"><span class="attr">admiral_url</span> = NA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件设置，发送重置密码邮件时使用</span></span><br><span class="line"><span class="attr">email_identity</span> = </span><br><span class="line"><span class="attr">email_server</span> = smtp.mydomain.com</span><br><span class="line"><span class="attr">email_server_port</span> = <span class="number">25</span></span><br><span class="line"><span class="attr">email_username</span> = sample_admin@mydomain.com</span><br><span class="line"><span class="attr">email_password</span> = abc</span><br><span class="line"><span class="attr">email_from</span> = admin &lt;sample_admin@mydomain.com&gt;</span><br><span class="line"><span class="attr">email_ssl</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Harbor后，管理员UI登录的密码，默认是Harbor12345</span></span><br><span class="line"><span class="attr">harbor_admin_password</span> = Harbor12345</span><br><span class="line"></span><br><span class="line"><span class="comment"># 认证方式，这里支持多种认证方式，如LADP、本次存储、数据库认证。默认是db_auth，mysql数据库认证</span></span><br><span class="line"><span class="attr">auth_mode</span> = db_auth</span><br><span class="line"></span><br><span class="line"><span class="comment"># LDAP认证时配置项</span></span><br><span class="line"><span class="comment">#ldap_url = ldaps://ldap.mydomain.com</span></span><br><span class="line"><span class="comment">#ldap_searchdn = uid=searchuser,ou=people,dc=mydomain,dc=com</span></span><br><span class="line"><span class="comment">#ldap_search_pwd = password</span></span><br><span class="line"><span class="comment">#ldap_basedn = ou=people,dc=mydomain,dc=com</span></span><br><span class="line"><span class="comment">#ldap_filter = (objectClass=person)</span></span><br><span class="line"><span class="comment">#ldap_uid = uid </span></span><br><span class="line"><span class="comment">#ldap_scope = 3 </span></span><br><span class="line"><span class="comment">#ldap_timeout = 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启自注册</span></span><br><span class="line"><span class="attr">self_registration</span> = <span class="literal">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Token有效时间，默认30分钟</span></span><br><span class="line"><span class="attr">token_expiration</span> = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户创建项目权限控制，默认是everyone（所有人），也可以设置为adminonly（只能管理员）</span></span><br><span class="line"><span class="attr">project_creation_restriction</span> = everyone</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-启动安装"><a href="#3-启动安装" class="headerlink" title="3. 启动安装"></a>3. 启动安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure><h3 id="4-Harbor-UI访问地址"><a href="#4-Harbor-UI访问地址" class="headerlink" title="4. Harbor-UI访问地址"></a>4. Harbor-UI访问地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://frp.teamfort.cn:80</span><br></pre></td></tr></table></figure><h2 id="2-Harbor使用过程中的坑"><a href="#2-Harbor使用过程中的坑" class="headerlink" title="2. Harbor使用过程中的坑"></a>2. Harbor使用过程中的坑</h2><ul><li><p>配置文件修改<br><br>第一次安装Harbor后，mysql的数据会存储在/data/database文件夹下。如果你想修改mysql root密码的话（不管你有没有重装），都要先把/data/database删掉，否则UI容器会一直报“Access denied”的错误，即便是重下镜像也无法解决。（这个问题花费了我大半天的时间，最后终于在官方issues里找到了解决方案T_T）<br>当然在自己的测试环境里边可以随便玩，但如果想把Harbor部署到生产环境中，强烈建议预先配置好各类环境参数，避免改动。</p></li><li><p>Nginx端口修改<br><br>Harbor的Nginx端口映射到宿主机的80端口上了，一般情况下我们不希望80端口被占用，所以需要修改docker-compose.yml文件：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">nginx:1.9</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span><span class="string">./common/config/nginx:/etc/nginx</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9999</span><span class="string">:80</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">registry</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ui</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">log</span></span><br></pre></td></tr></table></figure><p>  然后再修改common/templates/registry/config.yml文件：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth:</span></span><br><span class="line"><span class="attr">  token:</span></span><br><span class="line"><span class="attr">    issuer:</span><span class="string">registry-token-issuer</span></span><br><span class="line"><span class="attr">    realm:</span> <span class="string">$ui_url:9999/service/token</span></span><br><span class="line"><span class="attr">    rootcertbundle:</span><span class="string">/etc/registry/root.crt</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">token-service</span></span><br></pre></td></tr></table></figure><p>  修改完成后执行<code>sudo ./prepare</code>重新生成配置文件</p></li><li><p>Registry端口修改（非必需）<br><br>按照惯例，开放5000端口给registry使用，则修改docker-compose.yml文件，为registry节点添加posts属性，步骤与修改Nginx配置一样。</p></li><li><p>设置信赖列表<br><br>默认情况下，docker对registry的操作是基于https协议的，而Harbor默认是以http协议访问的，如果这时候执行docker login的操作，会得到这样的错误信息：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: Get https://xx.xxx.xx.xx/v1/users/: dial tcp xx.xxx.xx.xx:443:getsockopt: connection refused</span><br></pre></td></tr></table></figure><p>  这时候需要修改docker的启动文件<code>docker.service</code>，如下所示：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Modified,origin: ExecStart=/usr/bin/dockerd -H fd://</span></span><br><span class="line">ExecStart=/usr/bin/docker daemon -H fd:// --insecure-registry xx.xxx.xx.xx:5000</span><br></pre></td></tr></table></figure><p>  然后执行命令：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>登录私人仓库否则会出现 </p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">denied: requested access to the resource is denied</span><br></pre></td></tr></table></figure><p>  解决方法进行登录操作</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//登录</span><br><span class="line">docker login xx.xxx.xx.xx:5000</span><br><span class="line">//退出</span><br><span class="line">docker logout xx.xxx.xx.xx:5000</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Harbor使用"><a href="#3-Harbor使用" class="headerlink" title="3. Harbor使用"></a>3. Harbor使用</h2><ol><li><p>上传项目到Harbor<br> 以docker的官方镜像hello-world为例，先下载好镜像，然后给镜像打tag：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag hello-world xx.xx.xx.xx:5000/test/hello-world</span><br></pre></td></tr></table></figure><p> 其中“test”为项目名，如果预先没有创建test项目的话，push的时候会提示：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">denied: requested access to the resource is denied</span><br></pre></td></tr></table></figure><p> 那么现在Harbor UI里新建一个test项目，然后执行：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push xx.xx.xx.xx:5000/test/hello-world</span><br></pre></td></tr></table></figure></li><li><p>拉去镜像</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull xx.xx.xx.xx:5000/test/hello-world</span><br></pre></td></tr></table></figure><p> 会报连接错误</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><p> 解决的方法也很简单，在/etc/docker/daemon.json（如果没有就新建）中添加以下代码：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"insecure-registries"</span>:[<span class="string">"xx.xx.xx.xx:5000"</span>] &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker远程访问加入Tsl安全验证</title>
      <link href="/posts/63e1b8c2/"/>
      <url>/posts/63e1b8c2/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker远程访问加入Tsl安全验证"><a href="#Docker远程访问加入Tsl安全验证" class="headerlink" title="Docker远程访问加入Tsl安全验证"></a>Docker远程访问加入Tsl安全验证</h1><h3 id="Tsl脚本"><a href="#Tsl脚本" class="headerlink" title="Tsl脚本"></a>Tsl脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">reated by L.STONE &lt;web.developer.network@gmail.com&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动创建 Docker TLS 证书</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下是配置信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --[BEGIN]------------------------------</span></span><br><span class="line"></span><br><span class="line">CODE="docker"</span><br><span class="line">IP="服务器ip"</span><br><span class="line">PASSWORD="2707829"</span><br><span class="line">COUNTRY="CN"</span><br><span class="line">STATE="gd"</span><br><span class="line">CITY="fs"</span><br><span class="line">ORGANIZATION="teamfort"</span><br><span class="line">ORGANIZATIONAL_UNIT="Dev"</span><br><span class="line">COMMON_NAME="$IP"</span><br><span class="line">EMAIL="qq869672271@gmail.com"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --[END]--</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate CA key</span></span><br><span class="line">openssl genrsa -aes256 -passout "pass:$PASSWORD" -out "ca-key-$CODE.pem" 4096</span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate CA</span></span><br><span class="line">openssl req -new -x509 -days 365 -key "ca-key-$CODE.pem" -sha256 -out "ca-$CODE.pem" -passin "pass:$PASSWORD" -subj "/C=$COUNTRY/ST=$STATE/L=$CITY/O=$ORGANIZATION/OU=$ORGANIZATIONAL_UNIT/CN=$COMMON_NAME/emailAddress=$EMAIL"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate Server key</span></span><br><span class="line">openssl genrsa -out "server-key-$CODE.pem" 4096</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate Server Certs.</span></span><br><span class="line">openssl req -subj "/CN=$COMMON_NAME" -sha256 -new -key "server-key-$CODE.pem" -out server.csr</span><br><span class="line"></span><br><span class="line">echo "subjectAltName = IP:$IP,IP:127.0.0.1" &gt;&gt; extfile.cnf</span><br><span class="line">echo "extendedKeyUsage = serverAuth" &gt;&gt; extfile.cnf</span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 365 -sha256 -in server.csr -passin "pass:$PASSWORD" -CA "ca-$CODE.pem" -CAkey "ca-key-$CODE.pem" -CAcreateserial -out "server-cert-$CODE.pem" -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate Client Certs.</span></span><br><span class="line">rm -f extfile.cnf</span><br><span class="line"></span><br><span class="line">openssl genrsa -out "key-$CODE.pem" 4096</span><br><span class="line">openssl req -subj '/CN=client' -new -key "key-$CODE.pem" -out client.csr</span><br><span class="line">echo extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 365 -sha256 -in client.csr -passin "pass:$PASSWORD" -CA "ca-$CODE.pem" -CAkey "ca-key-$CODE.pem" -CAcreateserial -out "cert-$CODE.pem" -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line">rm -vf client.csr server.csr</span><br><span class="line"></span><br><span class="line">chmod -v 0400 "ca-key-$CODE.pem" "key-$CODE.pem" "server-key-$CODE.pem"</span><br><span class="line">chmod -v 0444 "ca-$CODE.pem" "server-cert-$CODE.pem" "cert-$CODE.pem"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打包客户端证书</span></span><br><span class="line">mkdir -p "tls-client-certs-$CODE"</span><br><span class="line">cp -f "ca-$CODE.pem" "cert-$CODE.pem" "key-$CODE.pem" "tls-client-certs-$CODE/"</span><br><span class="line">cd "tls-client-certs-$CODE"</span><br><span class="line">tar zcf "tls-client-certs-$CODE.tar.gz" *</span><br><span class="line">mv "tls-client-certs-$CODE.tar.gz" ../</span><br><span class="line">cd ..</span><br><span class="line">rm -rf "tls-client-certs-$CODE"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝服务端证书</span></span><br><span class="line">mkdir -p /etc/docker/certs.d</span><br><span class="line">cp "ca-$CODE.pem" "server-cert-$CODE.pem" "server-key-$CODE.pem" /etc/docker/certs.d/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/docker/daemon.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlsverify"</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlscacert"</span>: <span class="string">"/etc/docker/certs.d/ca.pem"</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlscert"</span>: <span class="string">"/etc/docker/certs.d/server-cert.pem"</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlskey"</span>: <span class="string">"/etc/docker/certs.d/server-key.pem"</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"hosts"</span>: [<span class="string">"tcp://0.0.0.0:2376"</span>, <span class="string">"unix:///var/run/docker.sock"</span>]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#125;</span></span><br><span class="line"></span><br><span class="line">echo " - 修改 /etc/docker/daemon.json 文件"</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  "tlsverify": true,</span><br><span class="line">  "tlscacert": "/etc/docker/certs.d/ca-$CODE.pem",</span><br><span class="line">  "tlscert": "/etc/docker/certs.d/server-cert-$CODE.pem",</span><br><span class="line">  "tlskey": "/etc/docker/certs.d/server-key-$CODE.pem",</span><br><span class="line">  "hosts": ["tcp://0.0.0.0:2376", "unix:///var/run/docker.sock"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">echo ""</span><br><span class="line">echo "或者在vi /lib/systemd/system/docker.service 中的 ExecStart=/usr/bin/dockerd后加入"</span><br><span class="line">echo "--tlsverify --tlscacert=/etc/docker/certs.d/ca-$CODE.pem --tlscert=/etc/docker/certs.d/server-cert-$CODE.pem --tlskey=/etc/docker/certs.d/server-key-$CODE.pem -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock"</span><br><span class="line">echo ""</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝客户端证书文件</span></span><br><span class="line">mkdir -p ~/.docker</span><br><span class="line">cp -v &#123;ca,cert,key&#125;-$CODE.pem ~/.docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端远程连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker -H 192.168.1.130:2376 --tlsverify --tlscacert ~/.docker/ca.pem --tlscert ~/.docker/cert.pem --tlskey ~/.docker/key.pem ps -a</span></span><br><span class="line">echo "docker -H $IP:2376 --tlsverify --tlscacert ~/.docker/ca-$CODE.pem --tlscert ~/.docker/cert-$CODE.pem --tlskey ~/.docker/key-$CODE.pem ps -a"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端使用 cURL 连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> curl --cacert ~/.docker/ca.pem --cert ~/.docker/cert.pem --key ~/.docker/key.pem https://192.168.1.130:2376/containers/json</span></span><br><span class="line">echo "curl --cacert ~/.docker/ca-$CODE.pem --cert ~/.docker/cert-$CODE.pem --key ~/.docker/key-$CODE.pem https://$IP:2376/containers/json"</span><br><span class="line"></span><br><span class="line">echo -e "\e[1;32mAll be done.\e[0m"</span><br></pre></td></tr></table></figure><p>然后在</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br><span class="line"><span class="comment">#ExecStart=/usr/bin/dockerd后加入</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/dockerd --tlsverify --tlscacert=/etc/docker/certs.d/ca-<span class="variable">$&#123;CODE&#125;</span>.pem --tlscert=/etc/docker/certs.d/server-cert-<span class="variable">$&#123;CODE&#125;</span>.pem --tlskey=/etc/docker/certs.d/server-key-<span class="variable">$&#123;CODE&#125;</span>.pem -H tcp://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2376</span> -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure><p><code>chmod +x tls.sh</code></p><p>客户端的密钥在 <code>~/.docker</code> 下</p><p>重启docker服务</p><p><code>systemctl daemon-reload</code> </p><p><code>systemctl restart docker</code></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
