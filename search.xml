<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JVM性能监控</title>
      <link href="/posts/31cced81/"/>
      <url>/posts/31cced81/</url>
      
        <content type="html"><![CDATA[<h1 id="一-JDK命令行工具监控"><a href="#一-JDK命令行工具监控" class="headerlink" title="一. JDK命令行工具监控"></a>一. JDK命令行工具监控</h1><h2 id="0-命令文档地址"><a href="#0-命令文档地址" class="headerlink" title="0. 命令文档地址"></a>0. 命令文档地址</h2><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/index.html</a></p><h2 id="1-XX参数分类"><a href="#1-XX参数分类" class="headerlink" title="1. XX参数分类"></a>1. XX参数分类</h2><ul><li>Boolean类型</li></ul><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F1.png" width="500" hegiht="313" align="center"><ul><li>非Boolean类型</li></ul><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F2.png" width="500" hegiht="313" align="center"><ul><li>-Xmx -Xms(最大内存,最小内存)<ol><li>-Xms等价于-XX.InitialHeapSize</li><li>-Xmx等价于-XX:MaxHeapSize</li></ol></li></ul><h2 id="2-查看JVM运行时参数"><a href="#2-查看JVM运行时参数" class="headerlink" title="2. 查看JVM运行时参数"></a>2. 查看JVM运行时参数</h2><ul><li>-XX:+PrintFlagslnitial 查看初始值情况</li><li>-XX:+PrintFlagsFinal   查看最终值</li><li>-XX:+UnlockExperimentalVMOptions 解锁实验参数</li><li>-XX:+UnlockDiagnosticVMOptions 解锁诊断参数</li><li>-xx:+PrintCommandLineFlags 打印命令行参数</li></ul><h3 id="2-1-PrintFlagsFinal"><a href="#2-1-PrintFlagsFinal" class="headerlink" title="2.1 PrintFlagsFinal"></a>2.1 PrintFlagsFinal</h3><ul><li>=表示默认值, :=被用户或者JVM修改后的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal -version</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-jps"><a href="#2-2-jps" class="headerlink" title="2.2 jps"></a>2.2 jps</h3><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jps.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jps.html</a></p><ul><li><p>jps用法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hostid 命令对应的服务器ip，默认不加参数，代码查看本机</span></span><br><span class="line">jps [参数] [&lt;hostid&gt;]</span><br></pre></td></tr></table></figure></li><li><p>jps参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-q：只输出进程 ID</span><br><span class="line">-m：输出传入 main 方法的参数</span><br><span class="line">-l：输出完全的包名，应用主类名，jar的完全路径名</span><br><span class="line">-v：输出jvm参数</span><br><span class="line">-V：输出通过flag文件传递到JVM中的参数</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-jinfo"><a href="#2-3-jinfo" class="headerlink" title="2.3 jinfo"></a>2.3 jinfo</h3><ol><li><p>功能</p><ul><li>查看JVM参数(常用)</li><li>查看系统参数，即可通过System.getProperty(key)获得的参数(常用)</li><li>修改JVM参数(少用)</li></ul></li><li><p>使用命令</p><ul><li><p>分析pid</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo [option] &#123;pid&#125;</span><br><span class="line"><span class="comment"># pid: 可通过jps或者ps获得</span></span><br></pre></td></tr></table></figure></li><li><p>分析core dump文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jinfo [option] &#123;executable&#125; &#123;core&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># executable: The Java executable from which the core dump was produced.</span></span><br><span class="line"><span class="comment"># core: The core file for which the configuration information is to be printed.</span></span><br></pre></td></tr></table></figure></li><li><p>分析远程进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinfo [option] [ server-id ] &#123;remote-hostname-or-IP&#125;</span><br><span class="line"><span class="comment"># server-id: An optional unique ID to use when multiple debug servers are running on the same remote host.</span></span><br><span class="line"><span class="comment"># remote-hostname-or-IP: 远程服务的IP或者hostname</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>option可选值</p><ul><li><p>no-option:即，没有任何option。会打印所有的JVM参数和系统参数。等同于-flags + -sysprops</p></li><li><p>-flag {name} : 打印指定的JVM参数值。</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag SurvivorRatio 55394</span><br><span class="line"><span class="comment"># 结果为: -XX:SurvivorRatio=8</span></span><br></pre></td></tr></table></figure></li><li><p>-flag [+|-]name : enables or disables指定的VM参数，也就是使指定的VM参数生效或者失效</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag -PrintGCDateStamps 12905</span><br><span class="line"><span class="comment"># 结果为：使PrintGCDateStamps失效</span></span><br></pre></td></tr></table></figure></li><li><p>-flag name=value : 为指定的VM参数(name)设置指定的值(value)</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag MaxHeapFreeRatio=80 12905</span><br><span class="line"><span class="comment"># 再通过jinfo -flag MaxHeapFreeRatio 12905查看其值</span></span><br><span class="line"><span class="comment"># 结果为: -XX:MaxHeapFreeRatio=80</span></span><br></pre></td></tr></table></figure></li><li><p>-flags : 打印所有的VM参数</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Non-default VM flags: -XX:CICompilerCount=2 -XX:CMSFullGCsBeforeCompaction=0 -XX:CMSInitiatingOccupancyFraction=80 -XX:+DisableExplicitGC -XX:ErrorFile=null -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=null -XX:InitialCodeCacheSize=134217728 -XX:InitialHeapSize=1073741824 -XX:MaxHeapSize=1073741824 -XX:MaxMetaspaceSize=268435456 -XX:MaxNewSize=268435456 -XX:MinHeapDeltaBytes=196608 -XX:NewSize=268435456 -XX:OldPLABSize=16 -XX:OldSize=805306368 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -XX:ReservedCodeCacheSize=134217728 -XX:SurvivorRatio=8 -XX:+UseCMSCompactAtFullCollection -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseFastUnorderedTimeStamps -XX:+UseParNewGC</span><br><span class="line">Command line:  -Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8 -Djava.io.tmpdir=/opt/micheal/tmp -Djava.net.preferIPv6Addresses=false -DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector -Xmx1g -Xms1g -Xmn256m -XX:SurvivorRatio=8 -XX:MaxMetaspaceSize=256m -XX:+HeapDumpOnOutOfMemoryError -XX:ReservedCodeCacheSize=128m -XX:InitialCodeCacheSize=128m -XX:+DisableExplicitGC -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -XX:+UseConcMarkSweepGC -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:CMSFullGCsBeforeCompaction=0 -XX:+UseCMSCompactAtFullCollection -XX:CMSInitiatingOccupancyFraction=80 -Xloggc:/opt/logs/mobile/xm.test.read/xm.test.read.gc.log -XX:ErrorFile=/opt/logs/mobile/xm.test.read/xm.test.read.vmerr.log -XX:HeapDumpPath=/opt/logs/mobile/xm.test.read/xm.test.read.heaperr.log -Djetty.appkey=xm.test.read -Djetty.context=/ -Djetty.logs=/opt/logs/mobile/xm.test.read -Djetty.webroot=/opt/micheal/mobile/xm.test.read/webroot</span><br></pre></td></tr></table></figure></li><li><p>-sysprops : 打印系统参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo -sysprops 12905</span><br></pre></td></tr></table></figure></li><li><p>-h : 帮助信息</p><ul><li>查看最大内存<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1292为进程Id</span></span><br><span class="line">jinfo -flag MaxHeapSize 1292</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><ul><li>查看垃圾回收器  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 1292为进程Id</span><br><span class="line">jinfo -flag UseG1GC 1292</span><br><span class="line">jinfo -flag UseConcMarkSweepGC 1292</span><br><span class="line">jinfo -flag UseParallelGC 1292</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-jstat查看JVM统计信息"><a href="#2-4-jstat查看JVM统计信息" class="headerlink" title="2.4 jstat查看JVM统计信息"></a>2.4 jstat查看JVM统计信息</h3><ul><li><p>用法</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line"><span class="comment"># option： 参数选项</span></span><br><span class="line"><span class="comment"># -t： 可以在打印的列加上Timestamp列，用于显示系统运行的时间</span></span><br><span class="line"><span class="comment"># -h： 可以在周期性数据数据的时候，可以在指定输出多少行以后输出一次表头</span></span><br><span class="line"><span class="comment"># vmid： Virtual Machine ID（ 进程的 pid）</span></span><br><span class="line"><span class="comment"># interval： 执行每次的间隔时间，单位为毫秒</span></span><br><span class="line"><span class="comment"># count： 用于指定输出多少次记录，缺省则会一直打印</span></span><br></pre></td></tr></table></figure></li><li><p>option参数</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-class</td><td>显示ClassLoad的相关信息；</td></tr><tr><td>-compiler</td><td>显示JIT编译的相关信息；</td></tr><tr><td>-gc</td><td>显示和gc相关的堆信息；</td></tr><tr><td>-gccapacity</td><td>显示各个代的容量以及使用情况；</td></tr><tr><td>-gcmetacapacity</td><td>显示metaspace的大小</td></tr><tr><td>-gcnew</td><td>显示新生代信息；</td></tr><tr><td>-gcnewcapacity</td><td>显示新生代大小和使用情况；</td></tr><tr><td>-gcold</td><td>显示老年代和永久代的信息；</td></tr><tr><td>-gcoldcapacity</td><td>显示老年代的大小；</td></tr><tr><td>-gcutil</td><td>显示垃圾收集信息；</td></tr><tr><td>-gccause</td><td>显示垃圾回收的相关信息（通-gcutil）,同时显示最后一次或当前正在发生的垃圾回收的诱因；</td></tr><tr><td>-printcompilation</td><td>输出JIT编译的方法信息；</td></tr></tbody></table></li></ul><ul><li><p>类加载 -class</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -class &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>Loaded</td><td>已经装载的类的数量</td></tr><tr><td>Bytes</td><td>装载类所占用的字节数</td></tr><tr><td>Unloaded</td><td>已经卸载类的数量</td></tr><tr><td>Bytes</td><td>卸载类的字节数</td></tr><tr><td>Time</td><td>装载和卸载类所花费的时间</td></tr><tr><td>*  -compiler 显示VM实时编译(JIT)的数量信息</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -compiler &lt;pid&gt;</span><br></pre></td></tr></table></figure></td><td></td></tr></tbody></table><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>Compiled</td><td>编译任务执行数量</td></tr><tr><td>Failed</td><td>编译任务执行失败数量</td></tr><tr><td>Invalid</td><td>编译任务执行失效数量</td></tr><tr><td>Time</td><td>编译任务消耗时间</td></tr><tr><td>FailedType</td><td>最后一个编译失败任务的类型</td></tr><tr><td>FailedMethod</td><td>最后一个编译失败任务所在的类及方法</td></tr><tr><td>* -gc 垃圾收集</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -gc,-gcutil,-gccause,-gcnew,-gcold</span><br><span class="line">jstat -gc &lt;pid&gt;</span><br></pre></td></tr></table></figure></td><td></td></tr></tbody></table><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 （字节）</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S0U</td><td>年轻代中第一个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>S1U</td><td>年轻代中第二个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>EU</td><td>年轻代中Eden（伊甸园）目前已使用空间 (字节)</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>OU</td><td>Old代目前已使用空间 (字节)</td></tr><tr><td>MC</td><td>metaspace(元空间)的容量 (字节)</td></tr><tr><td>MU</td><td>metaspace(元空间)目前已使用空间 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc所用时间(s)</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr><tr><td>CCSC</td><td>压缩类空间总量(字节)</td></tr><tr><td>CCSU</td><td>压缩类空间使用量(字节)</td></tr></tbody></table><ul><li><p>-gccapacity VM内存中三代（young,old,perm）对象的使用和占用大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gccapacity &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>NGCMN</td><td>年轻代(young)中初始化(最小)的大小(字节)</td></tr><tr><td>NGCMX</td><td>年轻代(young)的最大容量 (字节)</td></tr><tr><td>NGC</td><td>年轻代(young)中当前的容量 (字节)</td></tr><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>OGCMN</td><td>old代中初始化(最小)的大小 (字节)</td></tr><tr><td>OGCMX</td><td>old代的最大容量(字节)</td></tr><tr><td>OGC</td><td>old代当前新生成的容量 (字节)</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>MCMN</td><td>metaspace(元空间)中初始化(最小)的大小 (字节)</td></tr><tr><td>MCMX</td><td>metaspace(元空间)的最大容量 (字节)</td></tr><tr><td>MC</td><td>metaspace(元空间)当前新生成的容量 (字节)</td></tr><tr><td>CCSMN</td><td>最小压缩类空间大小</td></tr><tr><td>CCSMX</td><td>最大压缩类空间大小</td></tr><tr><td>CCSC</td><td>当前压缩类空间大小</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr></tbody></table></li><li><p>-gcmetacapacity metaspace中对象的信息及其占用量。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcmetacapacity &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>MCMN</td><td>最小元数据容量</td></tr><tr><td>MCMX</td><td>最大元数据容量</td></tr><tr><td>MC</td><td>当前元数据空间大小</td></tr><tr><td>CCSMN</td><td>最小压缩类空间大小</td></tr><tr><td>CCSMX</td><td>最大压缩类空间大小</td></tr><tr><td>CCSC</td><td>当前压缩类空间大小</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table></li><li><p>-gcnew 年轻代对象的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcnew &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S0U</td><td>年轻代中第一个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>S1U</td><td>年轻代中第二个survivor（幸存区）目前已使用空间 (字节)</td></tr><tr><td>TT</td><td>持有次数限制</td></tr><tr><td>MTT</td><td>最大持有次数限制</td></tr><tr><td>DSS</td><td>期望的幸存区大小</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>EU</td><td>年轻代中Eden（伊甸园）目前已使用空间 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc所用时间(s)</td></tr></tbody></table></li><li><p>-gcnewcapacity 年轻代对象的信息及其占用量</p><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>NGCMN</td><td>年轻代(young)中初始化(最小)的大小(字节)</td></tr><tr><td>NGCMX</td><td>年轻代(young)的最大容量 (字节)</td></tr><tr><td>NGC</td><td>年轻代(young)中当前的容量 (字节)</td></tr><tr><td>S0CMX</td><td>年轻代中第一个survivor（幸存区）的最大容量 (字节)</td></tr><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (字节)</td></tr><tr><td>S1CMX</td><td>年轻代中第二个survivor（幸存区）的最大容量 (字节)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (字节)</td></tr><tr><td>ECMX</td><td>年轻代中Eden（伊甸园）的最大容量 (字节)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr></tbody></table></li><li><p>-gcold old代对象的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcold &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>MC</td><td>metaspace(元空间)的容量 (字节)</td></tr><tr><td>MU</td><td>metaspace(元空间)目前已使用空间 (字节)</td></tr><tr><td>CCSC</td><td>压缩类空间大小</td></tr><tr><td>CCSU</td><td>压缩类空间使用大小</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>OU</td><td>Old代目前已使用空间 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table></li><li><p>-gcoldcapacity old代对象的信息及其占用量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcoldcapacity &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>OGCMN</td><td>old代中初始化(最小)的大小 (字节)</td></tr><tr><td>OGCMX</td><td>old代的最大容量(字节)</td></tr><tr><td>OGC</td><td>old代当前新生成的容量 (字节)</td></tr><tr><td>OC</td><td>Old代的容量 (字节)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table></li><li><p>-gcutil 统计gc信息</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcutil &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>S0</td><td>年轻代中第一个survivor（幸存区）已使用的占当前容量百分比</td></tr><tr><td>S1</td><td>年轻代中第二个survivor（幸存区）已使用的占当前容量百分比</td></tr><tr><td>E</td><td>年轻代中Eden（伊甸园）已使用的占当前容量百分比</td></tr><tr><td>O</td><td>old代已使用的占当前容量百分比</td></tr><tr><td>M</td><td>元数据的空间使用率</td></tr><tr><td>P</td><td>perm代已使用的占当前容量百分比</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>YGCT</td><td>从应用程序启动到采样时年轻代中gc所用时间(s)</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(全gc)gc所用时间(s)</td></tr><tr><td>GCT</td><td>从应用程序启动到采样时gc用的总时间(s)</td></tr></tbody></table></li><li><p>-gccause 显示垃圾回收的相关信息（通-gcutil）,同时显示最后一次或当前正在发生的垃圾回收的诱因。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gccause &lt;pid&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>结果字段</th><th>说明</th></tr></thead><tbody><tr><td>LGCC</td><td>最后一次GC原因</td></tr><tr><td>GCC</td><td>当前GC原因（No GC 为当前没有执行GC）</td></tr><tr><td>### 2.4 JVM的内存结构</td><td></td></tr></tbody></table></li></ul></li></ul><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F4.png" width="500" hegiht="313" align="center"><h3 id="2-5-jmap-MAT实战内存溢出"><a href="#2-5-jmap-MAT实战内存溢出" class="headerlink" title="2.5 jmap+MAT实战内存溢出"></a>2.5 jmap+MAT实战内存溢出</h3><ul><li><p>导出内存映像文件</p><ol><li><p>内存溢出自动导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:HeapDumpPath=./</span><br></pre></td></tr></table></figure></li><li><p>使用jmap命令手动导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=heap.hprof 1292</span><br></pre></td></tr></table></figure></li></ol></li><li><p>MAT分析内存溢出</p><ol><li><p>下载地址</p><p> <a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="noopener">http://www.eclipse.org/mat/downloads.php</a></p><p> 启动文件是<code>MemoryAnalyzer.exe</code></p><p> 打开hprof文件</p> <img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F5.png" width="500" hegiht="313" align="center"> <img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F6.png" width="500" hegiht="313" align="center"><hr> <img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F7.png" width="500" hegiht="313" align="center"></li></ol></li></ul><h3 id="2-5-jstack解决死循环和死锁"><a href="#2-5-jstack解决死循环和死锁" class="headerlink" title="2.5 jstack解决死循环和死锁"></a>2.5 jstack解决死循环和死锁</h3><ol><li><p>获取信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jstack 1292 &gt; 1292.txt</span><br><span class="line"># 找出cpu占用高的PID</span><br><span class="line">top -p 1292 -H</span><br><span class="line"># 获取PID的16进制</span><br><span class="line">printf &quot;%x&quot; 8247</span><br><span class="line"># 在1292.txt文件中搜索查到的进制:2037</span><br><span class="line"># 跳到nid=0x2037行</span><br></pre></td></tr></table></figure></li><li><p>线程状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 1292.txt</span><br><span class="line">java.lang.Thread.State: WAITING (parking)</span><br><span class="line"># NEW           新建</span><br><span class="line"># RUNNABLE      运行中</span><br><span class="line"># WAITING       等待</span><br><span class="line"># BLOCKED       阻塞</span><br><span class="line"># TERMINATED    结束</span><br></pre></td></tr></table></figure></li><li><p>死锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 拉到文件末尾</span><br><span class="line"># 有deadlock就是程序定位到死锁了</span><br></pre></td></tr></table></figure></li></ol><h1 id="三-java进程监控"><a href="#三-java进程监控" class="headerlink" title="三. java进程监控"></a>三. java进程监控</h1><h2 id="1-基于JVisualVM的可视化监控"><a href="#1-基于JVisualVM的可视化监控" class="headerlink" title="1. 基于JVisualVM的可视化监控"></a>1. 基于JVisualVM的可视化监控</h2><h3 id="1-本地监控"><a href="#1-本地监控" class="headerlink" title="1. 本地监控"></a>1. 本地监控</h3><pre><code>1. JVisualVM程序在jdk的bin目录下jvisualvm.exe2. 设置插件可安装</code></pre><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F8.png" width="500" hegiht="313" align="center"><img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java%2F9.png" width="500" hegiht="313" align="center"><h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2. 安装插件"></a>2. 安装插件</h3><ul><li><p>在下面地址中找出对应版本的<code>Java VisualVM</code>地址</p><p><a href="https://visualvm.github.io/pluginscenters.html" target="_blank" rel="noopener">https://visualvm.github.io/pluginscenters.html</a></p></li></ul><pre><code>* 安装Visual GC和BTrace插件</code></pre><h3 id="3-远程监控"><a href="#3-远程监控" class="headerlink" title="3. 远程监控"></a>3. 远程监控</h3><pre><code>* 远程jar监控<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=40124 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.net.preferIPv4Stack=true -Djava.rmi.server.hostname=39.108.187.59 -jar foo.jar</span><br><span class="line">#-Dcom.sun.management.jmxremote.port:远程监控端口</span><br><span class="line">#-Dcom.sun.management.jmxremote.ssl:指定了JMX是否启用ssl</span><br><span class="line">#-Dcom.sun.management.jmxremote.authenticate:指定了JMX是否启用鉴权（需要用户名，密码鉴权）</span><br><span class="line"># -Djava.rmi.server.hostname:运行程序的主机的ip</span><br></pre></td></tr></table></figure>* 配置hostname<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查询</span><br><span class="line">hostname -i</span><br><span class="line"># 加入hostname -i 的ip</span><br><span class="line"># 与127.0.0.1 的一致</span><br><span class="line">vi /etc/hosts</span><br><span class="line"># 关闭防火墙</span><br></pre></td></tr></table></figure></code></pre><h1 id="四-Nginx"><a href="#四-Nginx" class="headerlink" title="四. Nginx"></a>四. Nginx</h1><h2 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1. 基本命令"></a>1. 基本命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 使用default.conf配置文件，将它放入`/etc/nginx/conf.d` 中</span><br><span class="line"></span><br><span class="line"># 启动命令</span><br><span class="line">nginx -c /etc/nginx/nginx.conf</span><br><span class="line">重启命令</span><br><span class="line">nginx -s reload</span><br><span class="line"># 查看编译信息</span><br><span class="line">nginx -V</span><br><span class="line"># 注意:配置反向代理要关闭selinux,setenforce 0</span><br></pre></td></tr></table></figure><h2 id="2-nginx优化"><a href="#2-nginx优化" class="headerlink" title="2. nginx优化"></a>2. nginx优化</h2><h3 id="1-增加工作线程数和并发数"><a href="#1-增加工作线程数和并发数" class="headerlink" title="1. 增加工作线程数和并发数"></a>1. 增加工作线程数和并发数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># nginx.conf</span><br><span class="line">worker_processes 4; #cpu核心数</span><br><span class="line">events&#123;</span><br><span class="line">   worker_connections 10240; #每个进程打开的最大连接数,包含了nginx与客户端和nignx与upstream之间的连接 </span><br><span class="line">   multi_accept on; #可以一次建立多个连接</span><br><span class="line">   use epoll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-配置Server的长连接"><a href="#2-配置Server的长连接" class="headerlink" title="2. 配置Server的长连接"></a>2. 配置Server的长连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># default.conf</span><br><span class="line">keepalive 300; #设置长连接数的数量</span><br></pre></td></tr></table></figure><h3 id="3-配置数据压缩"><a href="#3-配置数据压缩" class="headerlink" title="3. 配置数据压缩"></a>3. 配置数据压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># nginx.conf</span><br><span class="line">gzip on;</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line">gzip_http_version 1.0;</span><br><span class="line">gzip_disable &quot;MSIE [1-6].(?!.*SV1)&quot;;</span><br><span class="line">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;</span><br><span class="line">gzip_vary on</span><br></pre></td></tr></table></figure><h3 id="4-操作系统优化"><a href="#4-操作系统优化" class="headerlink" title="4. 操作系统优化"></a>4. 操作系统优化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># /etc/sysctl.conf</span><br><span class="line">sysctl -w net.ipv4.tcp_syncookies = 1 # 防止一个套接字在有过多试图连接到达时引起过载</span><br><span class="line">sysctl -w net.core.somaxconn = 1024 #默认128,连接队列</span><br><span class="line">sysctl -w net.ipv4.tcp_fin_timeout = 10 #timewait的超时时间</span><br><span class="line">sysctl -w net.ipv4.tcp_tw_reuse = 1 #os直接使用timewait的连接</span><br><span class="line">sysctl -w net.ipv4.tcp_tw_recycle = 0 #回收禁用</span><br></pre></td></tr></table></figure><h2 id="3-nginx配置文件"><a href="#3-nginx配置文件" class="headerlink" title="3. nginx配置文件"></a>3. nginx配置文件</h2><ul><li><p>nginx.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">user  root;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">client_max_body_size 5m; </span><br><span class="line"></span><br><span class="line">underscores_in_headers on; #自定义 Head 必须定义 </span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_http_version 1.0;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].(?!.*SV1)&quot;;</span><br><span class="line">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;</span><br><span class="line">gzip_vary on</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>default.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">upstream teamfortWeChat &#123;  #代理配置</span><br><span class="line">server 127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream spring-boot-admin &#123; </span><br><span class="line">server 127.0.0.1:8012;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream spring-boot-admin-test &#123; #灰度ip发布</span><br><span class="line">server 127.0.0.1:8011;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#server &#123;#https配置</span><br><span class="line"> #   listen 443;</span><br><span class="line"> #   server_name 127.0.0.1;</span><br><span class="line"> #   ssl on;</span><br><span class="line"> #   root html;</span><br><span class="line"> #   index index.html index.htm;</span><br><span class="line"> #   ssl_certificate   cert/214245831800280.pem;</span><br><span class="line"> #   ssl_certificate_key  cert/214245831800280.key;</span><br><span class="line"> #   ssl_session_timeout 5m;</span><br><span class="line"> #   ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"> #   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"> #   ssl_prefer_server_ciphers on;</span><br><span class="line">#</span><br><span class="line">#location / &#123;</span><br><span class="line"># root   html;</span><br><span class="line">#         index  index.html index.htm;</span><br><span class="line">#    &#125;</span><br><span class="line">#location /teamfortWeChat/ &#123;</span><br><span class="line">#proxy_pass   http://teamfortWeChat;</span><br><span class="line">#proxy_redirect off;</span><br><span class="line">#proxy_set_header Host $host;</span><br><span class="line">#proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">#proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">#proxy_connect_timeout 90;</span><br><span class="line">#proxy_send_timeout 90;</span><br><span class="line">#proxy_read_timeout 90;</span><br><span class="line">#&#125;</span><br><span class="line">#</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line">server &#123;#http配置</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  127.0.0.1;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location /spring-boot-admin/ &#123;</span><br><span class="line">if ($remote_addr ~* &quot;116.20.64.169&quot;) &#123;#ip不同进入服务不同一般用于灰度发布</span><br><span class="line">proxy_pass http://spring-boot-admin;</span><br><span class="line">&#125;</span><br><span class="line">proxy_pass http://spring-boot-admin-test;</span><br><span class="line">proxy_redirect off;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_connect_timeout 90;</span><br><span class="line">proxy_send_timeout 90;</span><br><span class="line">proxy_read_timeout 90;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">   root   html;</span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #加载其他配置文件</span><br><span class="line">include /etc/nginx/conf.d/server80/*.conf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#设置例外静态资源，由nginx来处理静态资源#</span><br><span class="line">    location ~ \.(html|js|css|png|gif|jpg|jpeg|json|exml|fnt|ttf|TTF|woff|ico)$ &#123;  </span><br><span class="line">if ($request_uri ~* /spring-boot-admin/(.*)) &#123;#不需要nginx处理静态资源的项目</span><br><span class="line">proxy_pass http://spring-boot-admin;</span><br><span class="line">&#125;</span><br><span class="line">       root /usr/share/nginx/html; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">location /MP_verify_3YLUBmJdjqIG7yUh.txt &#123;  #微信公众号验证文件配置/usr/share/nginx/html</span><br><span class="line">        root /usr/share/nginx/html; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">location /.well-known/pki-validation/fileauth.txt &#123;  </span><br><span class="line">        root /usr/share/nginx/html; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #location / &#123;</span><br><span class="line">    #    root   /usr/share/nginx/html;</span><br><span class="line">    #    index  index.html index.htm;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="五-JVM的GC调优"><a href="#五-JVM的GC调优" class="headerlink" title="五. JVM的GC调优"></a>五. JVM的GC调优</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动时加入以下命令用于记录内存溢出时的记录</span></span><br><span class="line">-XX:+DisableExplicitGC  <span class="comment"># 使用nio或者Netty的框架不能使用</span></span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:HeapDumpPath=./logs/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下的是打印日常gc日志</span></span><br><span class="line">-XX:+PrintGCDetails <span class="comment"># 打印gc详情</span></span><br><span class="line">-XX:+PrintGCDateStamps <span class="comment"># 打印gc时间戳</span></span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line">-Xloggc:gcc.log <span class="comment"># 将日志输出到文件</span></span><br></pre></td></tr></table></figure><h2 id="5-1-GC日志"><a href="#5-1-GC日志" class="headerlink" title="5.1 GC日志"></a>5.1 GC日志</h2><ol><li><p>内容详情分析</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0.756: [Full GC (System) 0.756: [CMS: 0K-&gt;1696K(204800K), 0.0347096 secs] 11488K-&gt;1696K(252608K), [CMS Perm : 10328K-&gt;10320K(131072K)], 0.0347949 secs] [Times: user=0.06 sys=0.00, real=0.05 secs]</span><br><span class="line"> </span><br><span class="line">1.728: [GC 1.728: [ParNew: 38272K-&gt;2323K(47808K), 0.0092276 secs] 39968K-&gt;4019K(252608K), 0.0093169 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]</span><br><span class="line"> </span><br><span class="line">2.642: [GC 2.643: [ParNew: 40595K-&gt;3685K(47808K), 0.0075343 secs] 42291K-&gt;5381K(252608K), 0.0075972 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]</span><br><span class="line"> </span><br><span class="line">4.349: [GC 4.349: [ParNew: 41957K-&gt;5024K(47808K), 0.0106558 secs] 43653K-&gt;6720K(252608K), 0.0107390 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]</span><br><span class="line"> </span><br><span class="line">5.617: [GC 5.617: [ParNew: 43296K-&gt;7006K(47808K), 0.0136826 secs] 44992K-&gt;8702K(252608K), 0.0137904 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]</span><br><span class="line"> </span><br><span class="line">7.429: [GC 7.429: [ParNew: 45278K-&gt;6723K(47808K), 0.0251993 secs] 46974K-&gt;10551K(252608K), 0.0252421 secs]</span><br></pre></td></tr></table></figure><p> 取倒数第二条记录分析一下各个字段都代表了什么含义</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.617（时间戳）: [GC（Young GC） 5.617（时间戳）: [ParNew（GC的区域）: 43296K（垃圾回收前的大小）-&gt;7006K（垃圾回收以后的大小）(47808K)（该区域总大小）, 0.0136826 secs（回收时间）] 44992K（堆区垃圾被回收前的大小）-&gt;8702K（堆区垃圾被回收后的大小）(252608K)（堆区总大小）, 0.0137904 secs（回收时间）] [Times: user=0.03（GC用户耗时） sys=0.00（GC系统耗时）, real=0.02 secs（GC实际耗时）]</span><br></pre></td></tr></table></figure></li></ol><pre><code>从最后一条GC记录中我们可以看到 Young GC回收了 45278-6723=38555K的内存Heap区通过这次回收总共减少了 46974-10551=36423K的内存。38555-36423=2132K说明通过该次Young GC有2132K的内存被移动到了Old Gen我们来验证一下在最后一次Young GC的回收以前 Old Gen的大小为8702-7006=1696回收以后Old Gen的内存使用为10551-6723=3828Old Gen在该次Young GC以后内存增加了3828-1696=2132K 与预计的相符</code></pre><ol start="2"><li>内容总结分析<br> <img src="https://youdaoyun-chc.oss-cn-shenzhen.aliyuncs.com/java/GC%E6%97%A5%E5%BF%97.png" alt="image"><ul><li>[GC [DefNew … …]</li><li>GC日志开头的信息通过设置-verbose:gc参数后才能输出。</li><li>“[GC”和”[Full GC”说明这次垃圾收集的停顿类型，如果这次GC发生了Stop-The-World，则为”[Full GC”，否则为”[GC”</li><li>“[DefNew “表示GC发生的区域为Serial收集器的新生代中，DefNew是”Default New Generation”的缩写。Serial收集器的老年代和永久代分别表示为”Tenured”、”Perm”</li><li>** eden space 8192K, 52% used**</li><li>新生代的Eden区总共大小为8MB，使用掉的4MB是用来存放allocation4对象</li><li>tenured generation total 10240K, used 6144K</li><li>老年代大小为10MB，使用掉的6MB是用来存放allocation1、allocation2和allocation3这3个对象</li></ul></li></ol><h1 id="6-工具"><a href="#6-工具" class="headerlink" title="6 工具"></a>6 工具</h1><ul><li><p>在线GC日志分析</p><p> <a href="http://gceasy.io/" target="_blank" rel="noopener">http://gceasy.io/</a></p></li><li><p>JVM在线调优</p><p><a href="http://xxfox.perfma.com/" target="_blank" rel="noopener">http://xxfox.perfma.com/</a> </p></li><li><p>visualGC 日志工具</p></li></ul><h1 id="7-JVM知识的优秀文章"><a href="#7-JVM知识的优秀文章" class="headerlink" title="7 JVM知识的优秀文章"></a>7 JVM知识的优秀文章</h1><p><a href="https://www.jianshu.com/p/51d82de75d3d" target="_blank" rel="noopener">JVM调优总结</a>:有着详细的jvm知识介绍</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker命令选项</title>
      <link href="/posts/3fe19f6b/"/>
      <url>/posts/3fe19f6b/</url>
      
        <content type="html"><![CDATA[<h1 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h1><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>–log-opt max-size=[0-9+][k|m|g]</td><td>文件的大小<br><code>--log-opt max-size=10m</code></td></tr><tr><td>–log-opt max-file=[0-9+]</td><td>文件数量<br><code>--log-opt max-file=3</code></td></tr><tr><td>–add-host</td><td>指定往/etc/hosts添加的host<br><code>--add-host mysql:192.168.10.32</code></td></tr><tr><td>–restart=[no|on-failure|always|unless-stopped|]</td><td><code>no</code>:默认策略，在容器退出时不重启容器<br><code>on-failure</code>:在容器非正常退出时（退出状态非0），才会重启容器<br> <code>on-failure:3</code>:在容器非正常退出时重启容器，最多重启3次<br><code>always</code>:在容器退出时总是重启容器<br><code>unless-stopped</code>:在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</td></tr></tbody></table><h1 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h1><h2 id="1-Image"><a href="#1-Image" class="headerlink" title="1. Image"></a>1. Image</h2><ul><li><p>删除全部镜像记录</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure></li><li><p>删除退出的镜像记录</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -f &quot;status=exited&quot; -q)</span><br></pre></td></tr></table></figure></li><li><p>批量删除指定的镜像</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images | grep dgemc.asuscomm.com:9293/teamfort_vote/teamfort_vote | awk &apos;&#123;print $3&#125;&apos;)</span><br></pre></td></tr></table></figure></li><li><p>镜像内容拷贝<br>  先启动</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx  nginx</span><br></pre></td></tr></table></figure><p>  然后拷贝配置文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp nginx:/etc/nginx/ /etc/nginx/</span><br></pre></td></tr></table></figure><p>  然后删除</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -fv nginx</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-volume"><a href="#2-volume" class="headerlink" title="2. volume"></a>2. volume</h2><ul><li>删除所有（本地）没有被容器使用的volume  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-network"><a href="#3-network" class="headerlink" title="3. network"></a>3. network</h2><ul><li>删除所有孤立的网络。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network prune</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装教程</title>
      <link href="/posts/82496b1a/"/>
      <url>/posts/82496b1a/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h3 id="Docker文档地址"><a href="#Docker文档地址" class="headerlink" title="Docker文档地址"></a>Docker文档地址</h3><p><a href="https://cloud.tencent.com/developer/doc/1060" target="_blank" rel="noopener">https://cloud.tencent.com/developer/doc/1060</a></p><p><a href="https://docker_practice.gitee.io/" target="_blank" rel="noopener">https://docker_practice.gitee.io/</a></p><h3 id="一-安装教程来源"><a href="#一-安装教程来源" class="headerlink" title="一. 安装教程来源"></a>一. 安装教程来源</h3><p><a href="http://get.daocloud.io" target="_blank" rel="noopener">http://get.daocloud.io</a></p><h3 id="二-Linux安装Docker"><a href="#二-Linux安装Docker" class="headerlink" title="二. Linux安装Docker"></a>二. Linux安装Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><h3 id="三-Linux安装Docker-Compose"><a href="#三-Linux安装Docker-Compose" class="headerlink" title="三. Linux安装Docker Compose"></a>三. Linux安装Docker Compose</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="四-安装出现的问题解决"><a href="#四-安装出现的问题解决" class="headerlink" title="四. 安装出现的问题解决"></a>四. 安装出现的问题解决</h3><h4 id="1-Delta-RPMs-disabled-because-usr-bin-applydeltarpm-not-installed"><a href="#1-Delta-RPMs-disabled-because-usr-bin-applydeltarpm-not-installed" class="headerlink" title="1. Delta RPMs disabled because /usr/bin/applydeltarpm not installed"></a>1. <code>Delta RPMs disabled because /usr/bin/applydeltarpm not installed</code></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum provides <span class="string">'*/applydeltarpm'</span>  </span><br><span class="line">yum install deltarpm</span><br></pre></td></tr></table></figure><h3 id="五-Docker-开机自启动"><a href="#五-Docker-开机自启动" class="headerlink" title="五. Docker 开机自启动"></a>五. Docker 开机自启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置问题</title>
      <link href="/posts/c282aa2f/"/>
      <url>/posts/c282aa2f/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Docker容器和宿主机时间同步问题"><a href="#1-Docker容器和宿主机时间同步问题" class="headerlink" title="1. Docker容器和宿主机时间同步问题"></a>1. Docker容器和宿主机时间同步问题</h2><ul><li><p>原因:宿主机时区和Docker容器的不一致，导致两者相差8小时</p></li><li><p>解决方法一:<br>  启动容器的时候指定启动参数，自动挂载localtime文件到容器内</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name &lt;name&gt; -v /etc/localtime:/etc/localtime:ro  ....</span><br></pre></td></tr></table></figure></li><li><p>解决方法二:<br>  把时区设置加入到Dockerfile中</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CentOS</span></span><br><span class="line">RUN echo "Asia/shanghai" &gt; /etc/timezone;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-设置自定义仓库"><a href="#2-设置自定义仓库" class="headerlink" title="2. 设置自定义仓库"></a>2. 设置自定义仓库</h2><ul><li><p>修改 /etc/docker/daemon.json 文件</p>   <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"insecure-registries": [</span><br><span class="line">   <span class="string">"dgemc.asuscomm.com:9293"</span></span><br><span class="line"> ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-设置Docker-Hub源"><a href="#3-设置Docker-Hub源" class="headerlink" title="3. 设置Docker Hub源"></a>3. 设置Docker Hub源</h2><ul><li>修改 /etc/docker/daemon.json 文件  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"registry-mirrors": [</span><br><span class="line">    <span class="string">"http://d2f5eeb9.m.daocloud.io"</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-volume数据共享-–volumes-from"><a href="#4-volume数据共享-–volumes-from" class="headerlink" title="4. volume数据共享  –volumes-from"></a>4. volume数据共享  –volumes-from</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged -p 8692:8121 --name shunde_accounting-wechat -v shunde_accounting:/home shunde_accounting-wechat:1.0</span><br><span class="line"></span><br><span class="line">docker run -d --privileged -p 8692:8121 --name shunde_accounting-wechat2 --volumes-from shunde_accounting-wechat shunde_accounting-wechat:1.0</span><br></pre></td></tr></table></figure><h2 id="5-docker容器固定ip"><a href="#5-docker容器固定ip" class="headerlink" title="5. docker容器固定ip"></a>5. docker容器固定ip</h2><ol><li><p>network plugin创建一个新的bridge</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network  create  -d bridge --subnet=192.168.210.0/24 --gateway=192.168.210.1 -o parent=eth0 br1</span><br></pre></td></tr></table></figure></li><li><p>创建容器</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --net=br1 --ip=192.168.210.3 --name=nginx2 nginx:1.10-alpine</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-全局设置日志大小"><a href="#6-全局设置日志大小" class="headerlink" title="6. 全局设置日志大小"></a>6. 全局设置日志大小</h2><ul><li>在<code>/etc/docker/daemon.json</code>添加:  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"log-opts": &#123;"max-size":"100m", "max-file":"3"&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Harbor私有仓库搭建</title>
      <link href="/posts/27bcef6f/"/>
      <url>/posts/27bcef6f/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Harbor-服务搭建"><a href="#1-Harbor-服务搭建" class="headerlink" title="1. Harbor 服务搭建"></a>1. Harbor 服务搭建</h2><h3 id="1-下载Harbor安装文件"><a href="#1-下载Harbor安装文件" class="headerlink" title="1. 下载Harbor安装文件"></a>1. 下载Harbor安装文件</h3><ul><li>从 github harbor 官网 release 页面下载指定版本的安装包。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、在线安装包</span></span><br><span class="line">    wget https://github.com/vmware/harbor/releases/download/v1.7.4/harbor-online-installer-v1.7.4.tgz</span><br><span class="line">    tar xvf harbor-online-installer-v1.7.4.tgz</span><br><span class="line"><span class="comment"># 2、离线安装包</span></span><br><span class="line">    wget https://github.com/vmware/harbor/releases/download/v1.1.2/harbor-offline-installer-v1.7.4.tgz</span><br><span class="line">    tar xvf harbor-offline-installer-v1.7.4.tgz</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-配置harbor-cfg"><a href="#2-配置harbor-cfg" class="headerlink" title="2. 配置harbor.cfg"></a>2. 配置harbor.cfg</h3><ol><li>配置说明<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hostname设置访问地址，可以使用ip、域名，不可以设置为127.0.0.1或localhost</span></span><br><span class="line"><span class="attr">hostname</span> = frp.teamfort.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问协议，默认是http，也可以设置https，如果设置https，则nginx ssl需要设置on</span></span><br><span class="line"><span class="attr">ui_url_protocol</span> = http</span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql数据库root用户默认密码root123，实际使用时修改下</span></span><br><span class="line"><span class="attr">db_password</span> = root123</span><br><span class="line"></span><br><span class="line"><span class="attr">max_job_workers</span> = <span class="number">3</span> </span><br><span class="line"><span class="attr">customize_crt</span> = <span class="literal">on</span></span><br><span class="line"><span class="attr">ssl_cert</span> = /data/cert/server.crt</span><br><span class="line"><span class="attr">ssl_cert_key</span> = /data/cert/server.key</span><br><span class="line"><span class="attr">secretkey_path</span> = /data</span><br><span class="line"><span class="attr">admiral_url</span> = NA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件设置，发送重置密码邮件时使用</span></span><br><span class="line"><span class="attr">email_identity</span> = </span><br><span class="line"><span class="attr">email_server</span> = smtp.mydomain.com</span><br><span class="line"><span class="attr">email_server_port</span> = <span class="number">25</span></span><br><span class="line"><span class="attr">email_username</span> = sample_admin@mydomain.com</span><br><span class="line"><span class="attr">email_password</span> = abc</span><br><span class="line"><span class="attr">email_from</span> = admin &lt;sample_admin@mydomain.com&gt;</span><br><span class="line"><span class="attr">email_ssl</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Harbor后，管理员UI登录的密码，默认是Harbor12345</span></span><br><span class="line"><span class="attr">harbor_admin_password</span> = Harbor12345</span><br><span class="line"></span><br><span class="line"><span class="comment"># 认证方式，这里支持多种认证方式，如LADP、本次存储、数据库认证。默认是db_auth，mysql数据库认证</span></span><br><span class="line"><span class="attr">auth_mode</span> = db_auth</span><br><span class="line"></span><br><span class="line"><span class="comment"># LDAP认证时配置项</span></span><br><span class="line"><span class="comment">#ldap_url = ldaps://ldap.mydomain.com</span></span><br><span class="line"><span class="comment">#ldap_searchdn = uid=searchuser,ou=people,dc=mydomain,dc=com</span></span><br><span class="line"><span class="comment">#ldap_search_pwd = password</span></span><br><span class="line"><span class="comment">#ldap_basedn = ou=people,dc=mydomain,dc=com</span></span><br><span class="line"><span class="comment">#ldap_filter = (objectClass=person)</span></span><br><span class="line"><span class="comment">#ldap_uid = uid </span></span><br><span class="line"><span class="comment">#ldap_scope = 3 </span></span><br><span class="line"><span class="comment">#ldap_timeout = 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启自注册</span></span><br><span class="line"><span class="attr">self_registration</span> = <span class="literal">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Token有效时间，默认30分钟</span></span><br><span class="line"><span class="attr">token_expiration</span> = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户创建项目权限控制，默认是everyone（所有人），也可以设置为adminonly（只能管理员）</span></span><br><span class="line"><span class="attr">project_creation_restriction</span> = everyone</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-启动安装"><a href="#3-启动安装" class="headerlink" title="3. 启动安装"></a>3. 启动安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure><h3 id="4-Harbor-UI访问地址"><a href="#4-Harbor-UI访问地址" class="headerlink" title="4. Harbor-UI访问地址"></a>4. Harbor-UI访问地址</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://frp.teamfort.cn:80</span><br></pre></td></tr></table></figure><h2 id="2-Harbor使用过程中的坑"><a href="#2-Harbor使用过程中的坑" class="headerlink" title="2. Harbor使用过程中的坑"></a>2. Harbor使用过程中的坑</h2><ul><li><p>配置文件修改<br><br>第一次安装Harbor后，mysql的数据会存储在/data/database文件夹下。如果你想修改mysql root密码的话（不管你有没有重装），都要先把/data/database删掉，否则UI容器会一直报“Access denied”的错误，即便是重下镜像也无法解决。（这个问题花费了我大半天的时间，最后终于在官方issues里找到了解决方案T_T）<br>当然在自己的测试环境里边可以随便玩，但如果想把Harbor部署到生产环境中，强烈建议预先配置好各类环境参数，避免改动。</p></li><li><p>Nginx端口修改<br><br>Harbor的Nginx端口映射到宿主机的80端口上了，一般情况下我们不希望80端口被占用，所以需要修改docker-compose.yml文件：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">nginx:1.9</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span><span class="string">./common/config/nginx:/etc/nginx</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9999</span><span class="string">:80</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">443</span><span class="string">:443</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">registry</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ui</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">log</span></span><br></pre></td></tr></table></figure><p>  然后再修改common/templates/registry/config.yml文件：</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth:</span></span><br><span class="line"><span class="attr">  token:</span></span><br><span class="line"><span class="attr">    issuer:</span><span class="string">registry-token-issuer</span></span><br><span class="line"><span class="attr">    realm:</span> <span class="string">$ui_url:9999/service/token</span></span><br><span class="line"><span class="attr">    rootcertbundle:</span><span class="string">/etc/registry/root.crt</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">token-service</span></span><br></pre></td></tr></table></figure><p>  修改完成后执行<code>sudo ./prepare</code>重新生成配置文件</p></li><li><p>Registry端口修改（非必需）<br><br>按照惯例，开放5000端口给registry使用，则修改docker-compose.yml文件，为registry节点添加posts属性，步骤与修改Nginx配置一样。</p></li><li><p>设置信赖列表<br><br>默认情况下，docker对registry的操作是基于https协议的，而Harbor默认是以http协议访问的，如果这时候执行docker login的操作，会得到这样的错误信息：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: Get https://xx.xxx.xx.xx/v1/users/: dial tcp xx.xxx.xx.xx:443:getsockopt: connection refused</span><br></pre></td></tr></table></figure><p>  这时候需要修改docker的启动文件<code>docker.service</code>，如下所示：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Modified,origin: ExecStart=/usr/bin/dockerd -H fd://</span></span><br><span class="line">ExecStart=/usr/bin/docker daemon -H fd:// --insecure-registry xx.xxx.xx.xx:5000</span><br></pre></td></tr></table></figure><p>  然后执行命令：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>登录私人仓库否则会出现 </p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">denied: requested access to the resource is denied</span><br></pre></td></tr></table></figure><p>  解决方法进行登录操作</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//登录</span><br><span class="line">docker login xx.xxx.xx.xx:5000</span><br><span class="line">//退出</span><br><span class="line">docker logout xx.xxx.xx.xx:5000</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Harbor使用"><a href="#3-Harbor使用" class="headerlink" title="3. Harbor使用"></a>3. Harbor使用</h2><ol><li><p>上传项目到Harbor<br> 以docker的官方镜像hello-world为例，先下载好镜像，然后给镜像打tag：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag hello-world xx.xx.xx.xx:5000/test/hello-world</span><br></pre></td></tr></table></figure><p> 其中“test”为项目名，如果预先没有创建test项目的话，push的时候会提示：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">denied: requested access to the resource is denied</span><br></pre></td></tr></table></figure><p> 那么现在Harbor UI里新建一个test项目，然后执行：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push xx.xx.xx.xx:5000/test/hello-world</span><br></pre></td></tr></table></figure></li><li><p>拉去镜像</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull xx.xx.xx.xx:5000/test/hello-world</span><br></pre></td></tr></table></figure><p> 会报连接错误</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><p> 解决的方法也很简单，在/etc/docker/daemon.json（如果没有就新建）中添加以下代码：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"insecure-registries"</span>:[<span class="string">"xx.xx.xx.xx:5000"</span>] &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker远程访问加入Tsl安全验证</title>
      <link href="/posts/63e1b8c2/"/>
      <url>/posts/63e1b8c2/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker远程访问加入Tsl安全验证"><a href="#Docker远程访问加入Tsl安全验证" class="headerlink" title="Docker远程访问加入Tsl安全验证"></a>Docker远程访问加入Tsl安全验证</h1><h3 id="Tsl脚本"><a href="#Tsl脚本" class="headerlink" title="Tsl脚本"></a>Tsl脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">reated by L.STONE &lt;web.developer.network@gmail.com&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动创建 Docker TLS 证书</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下是配置信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --[BEGIN]------------------------------</span></span><br><span class="line"></span><br><span class="line">CODE="docker"</span><br><span class="line">IP="服务器ip"</span><br><span class="line">PASSWORD="2707829"</span><br><span class="line">COUNTRY="CN"</span><br><span class="line">STATE="gd"</span><br><span class="line">CITY="fs"</span><br><span class="line">ORGANIZATION="teamfort"</span><br><span class="line">ORGANIZATIONAL_UNIT="Dev"</span><br><span class="line">COMMON_NAME="$IP"</span><br><span class="line">EMAIL="qq869672271@gmail.com"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --[END]--</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate CA key</span></span><br><span class="line">openssl genrsa -aes256 -passout "pass:$PASSWORD" -out "ca-key-$CODE.pem" 4096</span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate CA</span></span><br><span class="line">openssl req -new -x509 -days 365 -key "ca-key-$CODE.pem" -sha256 -out "ca-$CODE.pem" -passin "pass:$PASSWORD" -subj "/C=$COUNTRY/ST=$STATE/L=$CITY/O=$ORGANIZATION/OU=$ORGANIZATIONAL_UNIT/CN=$COMMON_NAME/emailAddress=$EMAIL"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate Server key</span></span><br><span class="line">openssl genrsa -out "server-key-$CODE.pem" 4096</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate Server Certs.</span></span><br><span class="line">openssl req -subj "/CN=$COMMON_NAME" -sha256 -new -key "server-key-$CODE.pem" -out server.csr</span><br><span class="line"></span><br><span class="line">echo "subjectAltName = IP:$IP,IP:127.0.0.1" &gt;&gt; extfile.cnf</span><br><span class="line">echo "extendedKeyUsage = serverAuth" &gt;&gt; extfile.cnf</span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 365 -sha256 -in server.csr -passin "pass:$PASSWORD" -CA "ca-$CODE.pem" -CAkey "ca-key-$CODE.pem" -CAcreateserial -out "server-cert-$CODE.pem" -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generate Client Certs.</span></span><br><span class="line">rm -f extfile.cnf</span><br><span class="line"></span><br><span class="line">openssl genrsa -out "key-$CODE.pem" 4096</span><br><span class="line">openssl req -subj '/CN=client' -new -key "key-$CODE.pem" -out client.csr</span><br><span class="line">echo extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 365 -sha256 -in client.csr -passin "pass:$PASSWORD" -CA "ca-$CODE.pem" -CAkey "ca-key-$CODE.pem" -CAcreateserial -out "cert-$CODE.pem" -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line">rm -vf client.csr server.csr</span><br><span class="line"></span><br><span class="line">chmod -v 0400 "ca-key-$CODE.pem" "key-$CODE.pem" "server-key-$CODE.pem"</span><br><span class="line">chmod -v 0444 "ca-$CODE.pem" "server-cert-$CODE.pem" "cert-$CODE.pem"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打包客户端证书</span></span><br><span class="line">mkdir -p "tls-client-certs-$CODE"</span><br><span class="line">cp -f "ca-$CODE.pem" "cert-$CODE.pem" "key-$CODE.pem" "tls-client-certs-$CODE/"</span><br><span class="line">cd "tls-client-certs-$CODE"</span><br><span class="line">tar zcf "tls-client-certs-$CODE.tar.gz" *</span><br><span class="line">mv "tls-client-certs-$CODE.tar.gz" ../</span><br><span class="line">cd ..</span><br><span class="line">rm -rf "tls-client-certs-$CODE"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝服务端证书</span></span><br><span class="line">mkdir -p /etc/docker/certs.d</span><br><span class="line">cp "ca-$CODE.pem" "server-cert-$CODE.pem" "server-key-$CODE.pem" /etc/docker/certs.d/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/docker/daemon.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#123;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlsverify"</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlscacert"</span>: <span class="string">"/etc/docker/certs.d/ca.pem"</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlscert"</span>: <span class="string">"/etc/docker/certs.d/server-cert.pem"</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"tlskey"</span>: <span class="string">"/etc/docker/certs.d/server-key.pem"</span>,</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="string">"hosts"</span>: [<span class="string">"tcp://0.0.0.0:2376"</span>, <span class="string">"unix:///var/run/docker.sock"</span>]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &#125;</span></span><br><span class="line"></span><br><span class="line">echo " - 修改 /etc/docker/daemon.json 文件"</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  "tlsverify": true,</span><br><span class="line">  "tlscacert": "/etc/docker/certs.d/ca-$CODE.pem",</span><br><span class="line">  "tlscert": "/etc/docker/certs.d/server-cert-$CODE.pem",</span><br><span class="line">  "tlskey": "/etc/docker/certs.d/server-key-$CODE.pem",</span><br><span class="line">  "hosts": ["tcp://0.0.0.0:2376", "unix:///var/run/docker.sock"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">echo ""</span><br><span class="line">echo "或者在vi /lib/systemd/system/docker.service 中的 ExecStart=/usr/bin/dockerd后加入"</span><br><span class="line">echo "--tlsverify --tlscacert=/etc/docker/certs.d/ca-$CODE.pem --tlscert=/etc/docker/certs.d/server-cert-$CODE.pem --tlskey=/etc/docker/certs.d/server-key-$CODE.pem -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock"</span><br><span class="line">echo ""</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝客户端证书文件</span></span><br><span class="line">mkdir -p ~/.docker</span><br><span class="line">cp -v &#123;ca,cert,key&#125;-$CODE.pem ~/.docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端远程连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker -H 192.168.1.130:2376 --tlsverify --tlscacert ~/.docker/ca.pem --tlscert ~/.docker/cert.pem --tlskey ~/.docker/key.pem ps -a</span></span><br><span class="line">echo "docker -H $IP:2376 --tlsverify --tlscacert ~/.docker/ca-$CODE.pem --tlscert ~/.docker/cert-$CODE.pem --tlskey ~/.docker/key-$CODE.pem ps -a"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端使用 cURL 连接</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> curl --cacert ~/.docker/ca.pem --cert ~/.docker/cert.pem --key ~/.docker/key.pem https://192.168.1.130:2376/containers/json</span></span><br><span class="line">echo "curl --cacert ~/.docker/ca-$CODE.pem --cert ~/.docker/cert-$CODE.pem --key ~/.docker/key-$CODE.pem https://$IP:2376/containers/json"</span><br><span class="line"></span><br><span class="line">echo -e "\e[1;32mAll be done.\e[0m"</span><br></pre></td></tr></table></figure><p>然后在</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br><span class="line"><span class="comment">#ExecStart=/usr/bin/dockerd后加入</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/dockerd --tlsverify --tlscacert=/etc/docker/certs.d/ca-<span class="variable">$&#123;CODE&#125;</span>.pem --tlscert=/etc/docker/certs.d/server-cert-<span class="variable">$&#123;CODE&#125;</span>.pem --tlskey=/etc/docker/certs.d/server-key-<span class="variable">$&#123;CODE&#125;</span>.pem -H tcp://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2376</span> -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure><p><code>chmod +x tls.sh</code></p><p>客户端的密钥在 <code>~/.docker</code> 下</p><p>重启docker服务</p><p><code>systemctl daemon-reload</code> </p><p><code>systemctl restart docker</code></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
